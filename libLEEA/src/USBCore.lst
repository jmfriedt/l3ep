GAS LISTING /tmp/cc8D9STo.s 			page 1


   1               		.file	"USBCore.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/tmp/L3/src/",100,0,2,.Ltext0
   8               		.stabs	"USBCore.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=r(0,2);0;127;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"__int128:t(0,6)=@s128;r(0,6);02000000000000000000000000000000000000000000;0177777777777777
  18               		.stabs	"__int128 unsigned:t(0,7)=@s128;r(0,7);0;03777777777777777777777777777777777777777777;",128
  19               		.stabs	"long long int:t(0,8)=@s64;r(0,8);01000000000000000000000;00777777777777777777777;",128,0,0
  20               		.stabs	"long long unsigned int:t(0,9)=@s64;r(0,9);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,10)=r(0,10);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,11)=r(0,11);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,12)=@s8;r(0,12);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,15)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,16)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"short _Fract:t(0,17)=r(0,1);1;0;",128,0,0,0
  29               		.stabs	"_Fract:t(0,18)=r(0,1);2;0;",128,0,0,0
  30               		.stabs	"long _Fract:t(0,19)=r(0,1);4;0;",128,0,0,0
  31               		.stabs	"long long _Fract:t(0,20)=r(0,1);8;0;",128,0,0,0
  32               		.stabs	"unsigned short _Fract:t(0,21)=r(0,1);1;0;",128,0,0,0
  33               		.stabs	"unsigned _Fract:t(0,22)=r(0,1);2;0;",128,0,0,0
  34               		.stabs	"unsigned long _Fract:t(0,23)=r(0,1);4;0;",128,0,0,0
  35               		.stabs	"unsigned long long _Fract:t(0,24)=r(0,1);8;0;",128,0,0,0
  36               		.stabs	"_Sat short _Fract:t(0,25)=r(0,1);1;0;",128,0,0,0
  37               		.stabs	"_Sat _Fract:t(0,26)=r(0,1);2;0;",128,0,0,0
  38               		.stabs	"_Sat long _Fract:t(0,27)=r(0,1);4;0;",128,0,0,0
  39               		.stabs	"_Sat long long _Fract:t(0,28)=r(0,1);8;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned short _Fract:t(0,29)=r(0,1);1;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned _Fract:t(0,30)=r(0,1);2;0;",128,0,0,0
  42               		.stabs	"_Sat unsigned long _Fract:t(0,31)=r(0,1);4;0;",128,0,0,0
  43               		.stabs	"_Sat unsigned long long _Fract:t(0,32)=r(0,1);8;0;",128,0,0,0
  44               		.stabs	"short _Accum:t(0,33)=r(0,1);2;0;",128,0,0,0
  45               		.stabs	"_Accum:t(0,34)=r(0,1);4;0;",128,0,0,0
  46               		.stabs	"long _Accum:t(0,35)=r(0,1);8;0;",128,0,0,0
  47               		.stabs	"long long _Accum:t(0,36)=r(0,1);8;0;",128,0,0,0
  48               		.stabs	"unsigned short _Accum:t(0,37)=r(0,1);2;0;",128,0,0,0
  49               		.stabs	"unsigned _Accum:t(0,38)=r(0,1);4;0;",128,0,0,0
  50               		.stabs	"unsigned long _Accum:t(0,39)=r(0,1);8;0;",128,0,0,0
  51               		.stabs	"unsigned long long _Accum:t(0,40)=r(0,1);8;0;",128,0,0,0
  52               		.stabs	"_Sat short _Accum:t(0,41)=r(0,1);2;0;",128,0,0,0
  53               		.stabs	"_Sat _Accum:t(0,42)=r(0,1);4;0;",128,0,0,0
  54               		.stabs	"_Sat long _Accum:t(0,43)=r(0,1);8;0;",128,0,0,0
  55               		.stabs	"_Sat long long _Accum:t(0,44)=r(0,1);8;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned short _Accum:t(0,45)=r(0,1);2;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned _Accum:t(0,46)=r(0,1);4;0;",128,0,0,0
GAS LISTING /tmp/cc8D9STo.s 			page 2


  58               		.stabs	"_Sat unsigned long _Accum:t(0,47)=r(0,1);8;0;",128,0,0,0
  59               		.stabs	"_Sat unsigned long long _Accum:t(0,48)=r(0,1);8;0;",128,0,0,0
  60               		.stabs	"void:t(0,49)=(0,49)",128,0,0,0
  61               		.stabs	"../include/Platform.h",130,0,0,0
  62               		.stabs	"/usr/lib/avr/include/stdlib.h",130,0,0,0
  63               		.stabs	"/usr/lib/gcc/avr/5.4.0/include/stddef.h",130,0,0,0
  64               		.stabs	"size_t:t(3,1)=(0,4)",128,0,216,0
  65               		.stabs	"wchar_t:t(3,2)=(0,1)",128,0,328,0
  66               		.stabn	162,0,0,0
  67               		.stabs	"div_t:t(2,1)=(2,2)=s4quot:(0,1),0,16;rem:(0,1),16,16;;",128,0,73,0
  68               		.stabs	"ldiv_t:t(2,3)=(2,4)=s8quot:(0,3),0,32;rem:(0,3),32,32;;",128,0,79,0
  69               		.stabs	"__compar_fn_t:t(2,5)=(2,6)=*(2,7)=f(0,1)",128,0,82,0
  70               		.stabn	162,0,0,0
  71               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  72               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  73               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  74               		.stabs	"/usr/lib/gcc/avr/5.4.0/include/stdint.h",130,0,0,0
  75               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  76               		.stabs	"int8_t:t(8,1)=(0,12)",128,0,125,0
  77               		.stabs	"uint8_t:t(8,2)=(0,13)",128,0,126,0
  78               		.stabs	"int16_t:t(8,3)=(0,1)",128,0,127,0
  79               		.stabs	"uint16_t:t(8,4)=(0,4)",128,0,128,0
  80               		.stabs	"int32_t:t(8,5)=(0,3)",128,0,129,0
  81               		.stabs	"uint32_t:t(8,6)=(0,5)",128,0,130,0
  82               		.stabs	"int64_t:t(8,7)=(0,8)",128,0,132,0
  83               		.stabs	"uint64_t:t(8,8)=(0,9)",128,0,133,0
  84               		.stabs	"intptr_t:t(8,9)=(8,3)",128,0,146,0
  85               		.stabs	"uintptr_t:t(8,10)=(8,4)",128,0,151,0
  86               		.stabs	"int_least8_t:t(8,11)=(8,1)",128,0,163,0
  87               		.stabs	"uint_least8_t:t(8,12)=(8,2)",128,0,168,0
  88               		.stabs	"int_least16_t:t(8,13)=(8,3)",128,0,173,0
  89               		.stabs	"uint_least16_t:t(8,14)=(8,4)",128,0,178,0
  90               		.stabs	"int_least32_t:t(8,15)=(8,5)",128,0,183,0
  91               		.stabs	"uint_least32_t:t(8,16)=(8,6)",128,0,188,0
  92               		.stabs	"int_least64_t:t(8,17)=(8,7)",128,0,196,0
  93               		.stabs	"uint_least64_t:t(8,18)=(8,8)",128,0,203,0
  94               		.stabs	"int_fast8_t:t(8,19)=(8,1)",128,0,217,0
  95               		.stabs	"uint_fast8_t:t(8,20)=(8,2)",128,0,222,0
  96               		.stabs	"int_fast16_t:t(8,21)=(8,3)",128,0,227,0
  97               		.stabs	"uint_fast16_t:t(8,22)=(8,4)",128,0,232,0
  98               		.stabs	"int_fast32_t:t(8,23)=(8,5)",128,0,237,0
  99               		.stabs	"uint_fast32_t:t(8,24)=(8,6)",128,0,242,0
 100               		.stabs	"int_fast64_t:t(8,25)=(8,7)",128,0,250,0
 101               		.stabs	"uint_fast64_t:t(8,26)=(8,8)",128,0,257,0
 102               		.stabs	"intmax_t:t(8,27)=(8,7)",128,0,277,0
 103               		.stabs	"uintmax_t:t(8,28)=(8,8)",128,0,282,0
 104               		.stabn	162,0,0,0
 105               		.stabn	162,0,0,0
 106               		.stabs	"int_farptr_t:t(6,1)=(8,5)",128,0,77,0
 107               		.stabs	"uint_farptr_t:t(6,2)=(8,6)",128,0,81,0
 108               		.stabn	162,0,0,0
 109               		.stabn	162,0,0,0
 110               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
 111               		.stabs	"__fuse_t:t(9,1)=(9,2)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,244,0
 112               		.stabn	162,0,0,0
 113               		.stabn	162,0,0,0
 114               		.stabs	"/usr/lib/avr/include/avr/eeprom.h",130,0,0,0
GAS LISTING /tmp/cc8D9STo.s 			page 3


 115               		.stabs	"/usr/lib/gcc/avr/5.4.0/include/stddef.h",130,0,0,0
 116               		.stabs	"ptrdiff_t:t(11,1)=(0,1)",128,0,149,0
 117               		.stabs	"max_align_t:t(11,2)=(11,3)=s12__max_align_ll:(0,8),0,64;__max_align_ld:(0,16),64,32;;",128
 118               		.stabn	162,0,0,0
 119               		.stabn	162,0,0,0
 120               		.stabs	"u8:t(1,1)=(0,13)",128,0,17,0
 121               		.stabs	"u16:t(1,2)=(0,11)",128,0,18,0
 122               		.stabs	"u32:t(1,3)=(0,5)",128,0,19,0
 123               		.stabs	"word:t(1,4)=(0,4)",128,0,103,0
 124               		.stabs	"bool:t(1,5)=(8,2)",128,0,107,0
 125               		.stabs	"byte:t(1,6)=(8,2)",128,0,108,0
 126               		.stabn	162,0,0,0
 127               		.stabs	"../include/USBAPI.h",130,0,0,0
 128               		.stabs	"Setup:t(12,1)=(12,2)=s8bmRequestType:(8,2),0,8;bRequest:(8,2),8,8;wValueL:(8,2),16,8;wValu
 129               		.stabn	162,0,0,0
 130               		.stabs	"../include/USBCore.h",130,0,0,0
 131               		.stabs	"DeviceDescriptor:t(13,1)=(13,2)=s18len:(1,1),0,8;dtype:(1,1),8,8;usbVersion:(1,2),16,16;de
 132               		.stabs	"ConfigDescriptor:t(13,3)=(13,4)=s9len:(1,1),0,8;dtype:(1,1),8,8;clen:(1,2),16,16;numInterf
 133               		.stabs	"InterfaceDescriptor:t(13,5)=(13,6)=s9len:(1,1),0,8;dtype:(1,1),8,8;number:(1,1),16,8;alter
 134               		.stabs	"EndpointDescriptor:t(13,7)=(13,8)=s7len:(1,1),0,8;dtype:(1,1),8,8;addr:(1,1),16,8;attr:(1,
 135               		.stabs	"IADDescriptor:t(13,9)=(13,10)=s8len:(1,1),0,8;dtype:(1,1),8,8;firstInterface:(1,1),16,8;in
 136               		.stabs	"CDCCSInterfaceDescriptor:t(13,11)=(13,12)=s5len:(1,1),0,8;dtype:(1,1),8,8;subtype:(1,1),16
 137               		.stabs	"CDCCSInterfaceDescriptor4:t(13,13)=(13,14)=s4len:(1,1),0,8;dtype:(1,1),8,8;subtype:(1,1),1
 138               		.stabs	"CMFunctionalDescriptor:t(13,15)=(13,16)=s5len:(1,1),0,8;dtype:(1,1),8,8;subtype:(1,1),16,8
 139               		.stabs	"ACMFunctionalDescriptor:t(13,17)=(13,18)=s4len:(1,1),0,8;dtype:(1,1),8,8;subtype:(1,1),16,
 140               		.stabs	"CDCDescriptor:t(13,19)=(13,20)=s66iad:(13,9),0,64;cif:(13,5),64,72;header:(13,11),136,40;c
 141               		.stabs	"MSCDescriptor:t(13,21)=(13,22)=s23msc:(13,5),0,72;in:(13,7),72,56;out:(13,7),128,56;;",128
 142               		.stabs	"HIDDescDescriptor:t(13,23)=(13,24)=s9len:(1,1),0,8;dtype:(1,1),8,8;addr:(1,1),16,8;version
 143               		.stabs	"HIDDescriptor:t(13,25)=(13,26)=s25hid:(13,5),0,72;desc:(13,23),72,72;in:(13,7),144,56;;",1
 144               		.stabn	162,0,0,0
 145               		.section	.text.Recv,"ax",@progbits
 146               		.stabs	"Recv:F(0,49)",36,0,111,Recv
 147               		.stabs	"data:P(0,50)=*(0,51)=B(1,1)",64,0,111,24
 148               		.stabs	"count:P(1,1)",64,0,111,22
 149               	.global	Recv
 150               		.type	Recv, @function
 151               	Recv:
 152               		.stabd	46,0,0
   1:USBCore.c     **** /* Copyright (c) 2010, Peter Barrett  
   2:USBCore.c     **** **  
   3:USBCore.c     **** ** Permission to use, copy, modify, and/or distribute this software for  
   4:USBCore.c     **** ** any purpose with or without fee is hereby granted, provided that the  
   5:USBCore.c     **** ** above copyright notice and this permission notice appear in all copies.  
   6:USBCore.c     **** ** 
   7:USBCore.c     **** ** THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL  
   8:USBCore.c     **** ** WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED  
   9:USBCore.c     **** ** WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR  
  10:USBCore.c     **** ** BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES  
  11:USBCore.c     **** ** OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,  
  12:USBCore.c     **** ** WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  
  13:USBCore.c     **** ** ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS  
  14:USBCore.c     **** ** SOFTWARE.  
  15:USBCore.c     **** */
  16:USBCore.c     **** 
  17:USBCore.c     **** #include "Platform.h"
  18:USBCore.c     **** #include "USBAPI.h"
  19:USBCore.c     **** #include "USBDesc.h"
GAS LISTING /tmp/cc8D9STo.s 			page 4


  20:USBCore.c     **** #include "USBCore.h"
  21:USBCore.c     **** 
  22:USBCore.c     **** #define EP_TYPE_CONTROL				0x00
  23:USBCore.c     **** #define EP_TYPE_BULK_IN				0x81
  24:USBCore.c     **** #define EP_TYPE_BULK_OUT			0x80
  25:USBCore.c     **** #define EP_TYPE_INTERRUPT_IN		0xC1
  26:USBCore.c     **** #define EP_TYPE_INTERRUPT_OUT		0xC0
  27:USBCore.c     **** #define EP_TYPE_ISOCHRONOUS_IN		0x41
  28:USBCore.c     **** #define EP_TYPE_ISOCHRONOUS_OUT		0x40
  29:USBCore.c     **** 
  30:USBCore.c     **** /** Pulse generation counters to keep track of the number of milliseconds remaining for each pulse 
  31:USBCore.c     **** #define TX_RX_LED_PULSE_MS 100
  32:USBCore.c     **** volatile u8 TxLEDPulse; /**< Milliseconds remaining for data Tx LED pulse */
  33:USBCore.c     **** volatile u8 RxLEDPulse; /**< Milliseconds remaining for data Rx LED pulse */
  34:USBCore.c     **** 
  35:USBCore.c     **** //==================================================================
  36:USBCore.c     **** //==================================================================
  37:USBCore.c     **** 
  38:USBCore.c     **** extern const u16 STRING_LANGUAGE[] PROGMEM;
  39:USBCore.c     **** extern const u16 STRING_IPRODUCT[] PROGMEM;
  40:USBCore.c     **** extern const u16 STRING_IMANUFACTURER[] PROGMEM;
  41:USBCore.c     **** extern const DeviceDescriptor USB_DeviceDescriptor PROGMEM;
  42:USBCore.c     **** extern const DeviceDescriptor USB_DeviceDescriptorA PROGMEM;
  43:USBCore.c     **** 
  44:USBCore.c     **** const u16 STRING_LANGUAGE[2] = {
  45:USBCore.c     ****   (3<<8) | (2+2),
  46:USBCore.c     ****   0x0409	// English
  47:USBCore.c     **** };
  48:USBCore.c     **** 
  49:USBCore.c     **** const u16 STRING_IPRODUCT[17] = {
  50:USBCore.c     ****   (3<<8) | (2+2*16),
  51:USBCore.c     **** #if USB_PID == 0x8036	
  52:USBCore.c     ****   'L','E','E','A','i','n','o',' ','L','e','o','n','a','r','d','o'
  53:USBCore.c     **** #else
  54:USBCore.c     ****   'U','S','B',' ','I','O',' ','B','o','a','r','d',' ',' ',' ',' '
  55:USBCore.c     **** #endif
  56:USBCore.c     **** };
  57:USBCore.c     **** 
  58:USBCore.c     **** const u16 STRING_IMANUFACTURER[12] = {
  59:USBCore.c     ****   (3<<8) | (2+2*11),
  60:USBCore.c     **** #if USB_VID == 0x2341
  61:USBCore.c     ****   'L','E','E','A',' ',' ','U','F','R','S','T'
  62:USBCore.c     **** #else
  63:USBCore.c     ****   'U','n','k','n','o','w','n',' ',' ',' ',' '
  64:USBCore.c     **** #endif
  65:USBCore.c     **** };
  66:USBCore.c     **** 
  67:USBCore.c     **** #ifdef CDC_ENABLED
  68:USBCore.c     **** #define DEVICE_CLASS 0x02
  69:USBCore.c     **** #else
  70:USBCore.c     **** #define DEVICE_CLASS 0x00
  71:USBCore.c     **** #endif
  72:USBCore.c     **** 
  73:USBCore.c     **** //	DEVICE DESCRIPTOR
  74:USBCore.c     **** const DeviceDescriptor USB_DeviceDescriptor =
  75:USBCore.c     ****   D_DEVICE(0x00,0x00,0x00,64,USB_VID,USB_PID,0x100,IMANUFACTURER,IPRODUCT,0,1);
  76:USBCore.c     **** 
GAS LISTING /tmp/cc8D9STo.s 			page 5


  77:USBCore.c     **** const DeviceDescriptor USB_DeviceDescriptorA =
  78:USBCore.c     ****   D_DEVICE(DEVICE_CLASS,0x00,0x00,64,USB_VID,USB_PID,0x100,IMANUFACTURER,IPRODUCT,0,1);
  79:USBCore.c     **** 
  80:USBCore.c     **** //==================================================================
  81:USBCore.c     **** //==================================================================
  82:USBCore.c     **** 
  83:USBCore.c     **** volatile u8 _usbConfiguration = 0;
  84:USBCore.c     **** 
  85:USBCore.c     **** static inline void WaitIN(void)
  86:USBCore.c     **** {
  87:USBCore.c     ****   while (!(UEINTX & (1<<TXINI)));
  88:USBCore.c     **** }
  89:USBCore.c     **** 
  90:USBCore.c     **** static inline void ClearIN(void)
  91:USBCore.c     **** {
  92:USBCore.c     ****   UEINTX = ~(1<<TXINI);
  93:USBCore.c     **** }
  94:USBCore.c     **** 
  95:USBCore.c     **** static inline void WaitOUT(void)
  96:USBCore.c     **** {
  97:USBCore.c     ****   while (!(UEINTX & (1<<RXOUTI)));
  98:USBCore.c     **** }
  99:USBCore.c     **** 
 100:USBCore.c     **** static inline u8 WaitForINOrOUT()
 101:USBCore.c     **** {
 102:USBCore.c     ****   while (!(UEINTX & ((1<<TXINI)|(1<<RXOUTI))));
 103:USBCore.c     ****   return (UEINTX & (1<<RXOUTI)) == 0;
 104:USBCore.c     **** }
 105:USBCore.c     **** 
 106:USBCore.c     **** static inline void ClearOUT(void)
 107:USBCore.c     **** {
 108:USBCore.c     ****   UEINTX = ~(1<<RXOUTI);
 109:USBCore.c     **** }
 110:USBCore.c     **** 
 111:USBCore.c     **** void Recv(volatile u8* data, u8 count)
 112:USBCore.c     **** {
 153               		.stabn	68,0,112,.LM0-.LFBB1
 154               	.LM0:
 155               	.LFBB1:
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 0 */
 159               	.L__stack_usage = 0
 160               	.L2:
 113:USBCore.c     ****   while (count--)
 161               		.stabn	68,0,113,.LM1-.LFBB1
 162               	.LM1:
 163 0000 6150      		subi r22,1
 164 0002 00F0      		brcs .L5
 114:USBCore.c     ****     *data++ = UEDATX;
 165               		.stabn	68,0,114,.LM2-.LFBB1
 166               	.LM2:
 167 0004 2091 F100 		lds r18,241
 168 0008 FC01      		movw r30,r24
 169 000a 2083      		st Z,r18
 170 000c 0196      		adiw r24,1
 171 000e 00C0      		rjmp .L2
GAS LISTING /tmp/cc8D9STo.s 			page 6


 172               	.L5:
 115:USBCore.c     **** 	
 116:USBCore.c     ****   RXLED1;					// light the RX LED
 173               		.stabn	68,0,116,.LM3-.LFBB1
 174               	.LM3:
 175 0010 2898      		cbi 0x5,0
 117:USBCore.c     ****   RxLEDPulse = TX_RX_LED_PULSE_MS;	
 176               		.stabn	68,0,117,.LM4-.LFBB1
 177               	.LM4:
 178 0012 84E6      		ldi r24,lo8(100)
 179 0014 8093 0000 		sts RxLEDPulse,r24
 180 0018 0895      		ret
 181               		.size	Recv, .-Recv
 182               	.Lscope1:
 183               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 184               		.stabd	78,0,0
 185               		.section	.text.USBGetConfiguration,"ax",@progbits
 186               	.global	USBGetConfiguration
 187               		.type	USBGetConfiguration, @function
 188               	USBGetConfiguration:
 189               	/* prologue: function */
 190               	/* frame size = 0 */
 191               	/* stack size = 0 */
 192               	.L__stack_usage = 0
 193 0000 8091 0000 		lds r24,_usbConfiguration
 194 0004 0895      		ret
 195               		.size	USBGetConfiguration, .-USBGetConfiguration
 196               		.section	.text.LockEP,"ax",@progbits
 197               		.stabs	"LockEP:F(0,49)",36,0,200,LockEP
 198               		.stabs	"ep:P(1,1)",64,0,200,24
 199               	.global	LockEP
 200               		.type	LockEP, @function
 201               	LockEP:
 202               		.stabd	46,0,0
 118:USBCore.c     **** }
 119:USBCore.c     **** 
 120:USBCore.c     **** static inline u8 Recv8()
 121:USBCore.c     **** {
 122:USBCore.c     ****   RXLED1;					// light the RX LED
 123:USBCore.c     ****   RxLEDPulse = TX_RX_LED_PULSE_MS;
 124:USBCore.c     **** 
 125:USBCore.c     ****   return UEDATX;	
 126:USBCore.c     **** }
 127:USBCore.c     **** 
 128:USBCore.c     **** static inline void Send8(u8 d)
 129:USBCore.c     **** {
 130:USBCore.c     ****   UEDATX = d;
 131:USBCore.c     **** }
 132:USBCore.c     **** 
 133:USBCore.c     **** static inline void SetEP(u8 ep)
 134:USBCore.c     **** {
 135:USBCore.c     ****   UENUM = ep;
 136:USBCore.c     **** }
 137:USBCore.c     **** 
 138:USBCore.c     **** static inline u8 FifoByteCount()
 139:USBCore.c     **** {
 140:USBCore.c     ****   return UEBCLX;
GAS LISTING /tmp/cc8D9STo.s 			page 7


 141:USBCore.c     **** }
 142:USBCore.c     **** 
 143:USBCore.c     **** static inline u8 ReceivedSetupInt()
 144:USBCore.c     **** {
 145:USBCore.c     ****   return UEINTX & (1<<RXSTPI);
 146:USBCore.c     **** }
 147:USBCore.c     **** 
 148:USBCore.c     **** static inline void ClearSetupInt()
 149:USBCore.c     **** {
 150:USBCore.c     ****   UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 151:USBCore.c     **** }
 152:USBCore.c     **** 
 153:USBCore.c     **** static inline void Stall()
 154:USBCore.c     **** {
 155:USBCore.c     ****   UECONX = (1<<STALLRQ) | (1<<EPEN);
 156:USBCore.c     **** }
 157:USBCore.c     **** 
 158:USBCore.c     **** static inline u8 ReadWriteAllowed()
 159:USBCore.c     **** {
 160:USBCore.c     ****   return UEINTX & (1<<RWAL);
 161:USBCore.c     **** }
 162:USBCore.c     **** 
 163:USBCore.c     **** static inline u8 Stalled()
 164:USBCore.c     **** {
 165:USBCore.c     ****   return UEINTX & (1<<STALLEDI);
 166:USBCore.c     **** }
 167:USBCore.c     **** 
 168:USBCore.c     **** static inline u8 FifoFree()
 169:USBCore.c     **** {
 170:USBCore.c     ****   return UEINTX & (1<<FIFOCON);
 171:USBCore.c     **** }
 172:USBCore.c     **** 
 173:USBCore.c     **** static inline void ReleaseRX()
 174:USBCore.c     **** {
 175:USBCore.c     ****   UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
 176:USBCore.c     **** }
 177:USBCore.c     **** 
 178:USBCore.c     **** static inline void ReleaseTX()
 179:USBCore.c     **** {
 180:USBCore.c     ****   UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
 181:USBCore.c     **** }
 182:USBCore.c     **** 
 183:USBCore.c     **** static inline u8 FrameNumber()
 184:USBCore.c     **** {
 185:USBCore.c     ****   return UDFNUML;
 186:USBCore.c     **** }
 187:USBCore.c     **** 
 188:USBCore.c     **** //==================================================================
 189:USBCore.c     **** //==================================================================
 190:USBCore.c     **** 
 191:USBCore.c     **** u8 USBGetConfiguration(void)
 192:USBCore.c     **** {
 193:USBCore.c     ****   return _usbConfiguration;
 194:USBCore.c     **** }
 195:USBCore.c     **** 
 196:USBCore.c     **** #define USB_RECV_TIMEOUT
 197:USBCore.c     **** 
GAS LISTING /tmp/cc8D9STo.s 			page 8


 198:USBCore.c     **** 
 199:USBCore.c     **** static	u8 _sreg;
 200:USBCore.c     **** void LockEP(u8 ep) 
 201:USBCore.c     **** {
 203               		.stabn	68,0,201,.LM5-.LFBB2
 204               	.LM5:
 205               	.LFBB2:
 206               	/* prologue: function */
 207               	/* frame size = 0 */
 208               	/* stack size = 0 */
 209               	.L__stack_usage = 0
 202:USBCore.c     ****   _sreg=SREG;
 210               		.stabn	68,0,202,.LM6-.LFBB2
 211               	.LM6:
 212 0000 9FB7      		in r25,__SREG__
 213 0002 9093 0000 		sts _sreg,r25
 203:USBCore.c     ****   cli();
 214               		.stabn	68,0,203,.LM7-.LFBB2
 215               	.LM7:
 216               	/* #APP */
 217               	 ;  203 "USBCore.c" 1
 218 0006 F894      		cli
 219               	 ;  0 "" 2
 204:USBCore.c     ****   SetEP(ep & 7);
 220               		.stabn	68,0,204,.LM8-.LFBB2
 221               	.LM8:
 222               	/* #NOAPP */
 223 0008 8770      		andi r24,lo8(7)
 224               	.LBB81:
 225               	.LBB82:
 135:USBCore.c     **** }
 226               		.stabn	68,0,135,.LM9-.LFBB2
 227               	.LM9:
 228 000a 8093 E900 		sts 233,r24
 229 000e 0895      		ret
 230               	.LBE82:
 231               	.LBE81:
 232               		.size	LockEP, .-LockEP
 233               	.Lscope2:
 234               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 235               		.stabd	78,0,0
 236               		.section	.text.unLockEP,"ax",@progbits
 237               		.stabs	"unLockEP:F(0,49)",36,0,206,unLockEP
 238               	.global	unLockEP
 239               		.type	unLockEP, @function
 240               	unLockEP:
 241               		.stabd	46,0,0
 205:USBCore.c     **** }
 206:USBCore.c     **** void unLockEP()
 207:USBCore.c     **** {
 242               		.stabn	68,0,207,.LM10-.LFBB3
 243               	.LM10:
 244               	.LFBB3:
 245               	/* prologue: function */
 246               	/* frame size = 0 */
 247               	/* stack size = 0 */
 248               	.L__stack_usage = 0
GAS LISTING /tmp/cc8D9STo.s 			page 9


 208:USBCore.c     ****   SREG = _sreg;
 249               		.stabn	68,0,208,.LM11-.LFBB3
 250               	.LM11:
 251 0000 8091 0000 		lds r24,_sreg
 252 0004 8FBF      		out __SREG__,r24
 253 0006 0895      		ret
 254               		.size	unLockEP, .-unLockEP
 255               	.Lscope3:
 256               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 257               		.stabd	78,0,0
 258               		.section	.text.USB_Available,"ax",@progbits
 259               		.stabs	"USB_Available:F(1,1)",36,0,213,USB_Available
 260               		.stabs	"ep:P(1,1)",64,0,213,24
 261               	.global	USB_Available
 262               		.type	USB_Available, @function
 263               	USB_Available:
 264               		.stabd	46,0,0
 209:USBCore.c     **** }
 210:USBCore.c     **** 
 211:USBCore.c     **** 
 212:USBCore.c     **** //	Number of bytes, assumes a rx endpoint
 213:USBCore.c     **** u8 USB_Available(u8 ep)
 214:USBCore.c     **** {
 265               		.stabn	68,0,214,.LM12-.LFBB4
 266               	.LM12:
 267               	.LFBB4:
 268               	/* prologue: function */
 269               	/* frame size = 0 */
 270               	/* stack size = 0 */
 271               	.L__stack_usage = 0
 215:USBCore.c     ****   LockEP(ep);
 272               		.stabn	68,0,215,.LM13-.LFBB4
 273               	.LM13:
 274 0000 0E94 0000 		call LockEP
 275               	.LBB83:
 276               	.LBB84:
 140:USBCore.c     **** }
 277               		.stabn	68,0,140,.LM14-.LFBB4
 278               	.LM14:
 279 0004 8091 F200 		lds r24,242
 280               	.LBE84:
 281               	.LBE83:
 216:USBCore.c     ****   return FifoByteCount();
 217:USBCore.c     ****   unLockEP();
 218:USBCore.c     **** }
 282               		.stabn	68,0,218,.LM15-.LFBB4
 283               	.LM15:
 284 0008 0895      		ret
 285               		.size	USB_Available, .-USB_Available
 286               	.Lscope4:
 287               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 288               		.stabd	78,0,0
 289               		.section	.text.USB_Recv,"ax",@progbits
 290               		.stabs	"USB_Recv:F(0,1)",36,0,222,USB_Recv
 291               		.stabs	"ep:P(1,1)",64,0,222,24
 292               		.stabs	"len:P(0,1)",64,0,222,20
 293               	.global	USB_Recv
GAS LISTING /tmp/cc8D9STo.s 			page 10


 294               		.type	USB_Recv, @function
 295               	USB_Recv:
 296               		.stabd	46,0,0
 219:USBCore.c     **** 
 220:USBCore.c     **** //	Non Blocking receive
 221:USBCore.c     **** //	Return number of bytes read
 222:USBCore.c     **** int USB_Recv(u8 ep, void* d, int len)
 223:USBCore.c     **** {
 297               		.stabn	68,0,223,.LM16-.LFBB5
 298               	.LM16:
 299               	.LFBB5:
 300 0000 EF92      		push r14
 301 0002 FF92      		push r15
 302 0004 0F93      		push r16
 303 0006 1F93      		push r17
 304 0008 CF93      		push r28
 305 000a DF93      		push r29
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 6 */
 309               	.L__stack_usage = 6
 224:USBCore.c     ****   if (!_usbConfiguration || len < 0)
 310               		.stabn	68,0,224,.LM17-.LFBB5
 311               	.LM17:
 312 000c 9091 0000 		lds r25,_usbConfiguration
 313 0010 9923      		tst r25
 314 0012 01F0      		breq .L17
 315               		.stabn	68,0,224,.LM18-.LFBB5
 316               	.LM18:
 317 0014 57FD      		sbrc r21,7
 318 0016 00C0      		rjmp .L17
 319 0018 8A01      		movw r16,r20
 320 001a 7B01      		movw r14,r22
 225:USBCore.c     ****     return -1;
 226:USBCore.c     **** 	
 227:USBCore.c     ****   LockEP(ep);
 321               		.stabn	68,0,227,.LM19-.LFBB5
 322               	.LM19:
 323 001c 0E94 0000 		call LockEP
 324               	.LBB93:
 325               	.LBB94:
 140:USBCore.c     **** }
 326               		.stabn	68,0,140,.LM20-.LFBB5
 327               	.LM20:
 328 0020 C091 F200 		lds r28,242
 329               	.LBE94:
 330               	.LBE93:
 228:USBCore.c     ****   u8 n = FifoByteCount();
 229:USBCore.c     ****   len = min(n,len);
 331               		.stabn	68,0,229,.LM21-.LFBB5
 332               	.LM21:
 333 0024 D0E0      		ldi r29,0
 334 0026 0C17      		cp r16,r28
 335 0028 1D07      		cpc r17,r29
 336 002a 04F4      		brge .L12
 337 002c E801      		movw r28,r16
 338               	.L12:
GAS LISTING /tmp/cc8D9STo.s 			page 11


 230:USBCore.c     ****   n = len;
 339               		.stabn	68,0,230,.LM22-.LFBB5
 340               	.LM22:
 341 002e 8C2F      		mov r24,r28
 342 0030 F701      		movw r30,r14
 343               	.LBB95:
 344               	.LBB96:
 123:USBCore.c     **** 
 345               		.stabn	68,0,123,.LM23-.LFBB5
 346               	.LM23:
 347 0032 94E6      		ldi r25,lo8(100)
 348               	.L13:
 349               	.LBE96:
 350               	.LBE95:
 231:USBCore.c     ****   u8* dst = (u8*)d;
 232:USBCore.c     ****   while (n--)
 351               		.stabn	68,0,232,.LM24-.LFBB5
 352               	.LM24:
 353 0034 8150      		subi r24,1
 354 0036 00F0      		brcs .L21
 355               	.LBB98:
 356               	.LBB97:
 122:USBCore.c     ****   RxLEDPulse = TX_RX_LED_PULSE_MS;
 357               		.stabn	68,0,122,.LM25-.LFBB5
 358               	.LM25:
 359 0038 2898      		cbi 0x5,0
 123:USBCore.c     **** 
 360               		.stabn	68,0,123,.LM26-.LFBB5
 361               	.LM26:
 362 003a 9093 0000 		sts RxLEDPulse,r25
 125:USBCore.c     **** }
 363               		.stabn	68,0,125,.LM27-.LFBB5
 364               	.LM27:
 365 003e 2091 F100 		lds r18,241
 366               	.LBE97:
 367               	.LBE98:
 233:USBCore.c     ****     *dst++ = Recv8();
 368               		.stabn	68,0,233,.LM28-.LFBB5
 369               	.LM28:
 370 0042 2193      		st Z+,r18
 371 0044 00C0      		rjmp .L13
 372               	.L21:
 234:USBCore.c     ****   if (len && !FifoByteCount())	// release empty buffer
 373               		.stabn	68,0,234,.LM29-.LFBB5
 374               	.LM29:
 375 0046 2097      		sbiw r28,0
 376 0048 01F0      		breq .L15
 377               	.LBB99:
 378               	.LBB100:
 140:USBCore.c     **** }
 379               		.stabn	68,0,140,.LM30-.LFBB5
 380               	.LM30:
 381 004a 8091 F200 		lds r24,242
 382               	.LBE100:
 383               	.LBE99:
 384               		.stabn	68,0,234,.LM31-.LFBB5
 385               	.LM31:
GAS LISTING /tmp/cc8D9STo.s 			page 12


 386 004e 8111      		cpse r24,__zero_reg__
 387 0050 00C0      		rjmp .L15
 388               	.LBB101:
 389               	.LBB102:
 175:USBCore.c     **** }
 390               		.stabn	68,0,175,.LM32-.LFBB5
 391               	.LM32:
 392 0052 8BE6      		ldi r24,lo8(107)
 393 0054 8093 E800 		sts 232,r24
 394               	.L15:
 395               	.LBE102:
 396               	.LBE101:
 235:USBCore.c     ****     ReleaseRX();
 236:USBCore.c     ****   unLockEP();	
 397               		.stabn	68,0,236,.LM33-.LFBB5
 398               	.LM33:
 399 0058 0E94 0000 		call unLockEP
 229:USBCore.c     ****   n = len;
 400               		.stabn	68,0,229,.LM34-.LFBB5
 401               	.LM34:
 402 005c CE01      		movw r24,r28
 237:USBCore.c     ****   return len;
 403               		.stabn	68,0,237,.LM35-.LFBB5
 404               	.LM35:
 405 005e 00C0      		rjmp .L11
 406               	.L17:
 225:USBCore.c     **** 	
 407               		.stabn	68,0,225,.LM36-.LFBB5
 408               	.LM36:
 409 0060 8FEF      		ldi r24,lo8(-1)
 410 0062 9FEF      		ldi r25,lo8(-1)
 411               	.L11:
 412               	/* epilogue start */
 238:USBCore.c     **** }
 413               		.stabn	68,0,238,.LM37-.LFBB5
 414               	.LM37:
 415 0064 DF91      		pop r29
 416 0066 CF91      		pop r28
 417 0068 1F91      		pop r17
 418 006a 0F91      		pop r16
 419 006c FF90      		pop r15
 420 006e EF90      		pop r14
 421 0070 0895      		ret
 422               		.size	USB_Recv, .-USB_Recv
 423               		.stabs	"n:r(1,1)",64,0,228,24
 424               		.stabn	192,0,0,.LFBB5-.LFBB5
 425               		.stabn	224,0,0,.Lscope5-.LFBB5
 426               	.Lscope5:
 427               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 428               		.stabd	78,0,0
 429               		.section	.text.USB_RecvNB,"ax",@progbits
 430               		.stabs	"USB_RecvNB:F(0,1)",36,0,241,USB_RecvNB
 431               		.stabs	"ep:P(1,1)",64,0,241,24
 432               	.global	USB_RecvNB
 433               		.type	USB_RecvNB, @function
 434               	USB_RecvNB:
 435               		.stabd	46,0,0
GAS LISTING /tmp/cc8D9STo.s 			page 13


 239:USBCore.c     **** 
 240:USBCore.c     **** //	Recv 1 byte if ready
 241:USBCore.c     **** int USB_RecvNB(u8 ep)
 242:USBCore.c     **** {
 436               		.stabn	68,0,242,.LM38-.LFBB6
 437               	.LM38:
 438               	.LFBB6:
 439 0000 CF93      		push r28
 440 0002 DF93      		push r29
 441 0004 1F92      		push __zero_reg__
 442 0006 CDB7      		in r28,__SP_L__
 443 0008 DEB7      		in r29,__SP_H__
 444               	/* prologue: function */
 445               	/* frame size = 1 */
 446               	/* stack size = 3 */
 447               	.L__stack_usage = 3
 243:USBCore.c     ****   u8 c;
 244:USBCore.c     ****   if (USB_Recv(ep,&c,1) != 1)
 448               		.stabn	68,0,244,.LM39-.LFBB6
 449               	.LM39:
 450 000a 41E0      		ldi r20,lo8(1)
 451 000c 50E0      		ldi r21,0
 452 000e BE01      		movw r22,r28
 453 0010 6F5F      		subi r22,-1
 454 0012 7F4F      		sbci r23,-1
 455 0014 0E94 0000 		call USB_Recv
 456 0018 0197      		sbiw r24,1
 457 001a 01F4      		brne .L24
 245:USBCore.c     ****     return -1;
 246:USBCore.c     ****   return c;
 458               		.stabn	68,0,246,.LM40-.LFBB6
 459               	.LM40:
 460 001c 8981      		ldd r24,Y+1
 461 001e 90E0      		ldi r25,0
 462 0020 00C0      		rjmp .L23
 463               	.L24:
 245:USBCore.c     ****     return -1;
 464               		.stabn	68,0,245,.LM41-.LFBB6
 465               	.LM41:
 466 0022 8FEF      		ldi r24,lo8(-1)
 467 0024 9FEF      		ldi r25,lo8(-1)
 468               	.L23:
 469               	/* epilogue start */
 247:USBCore.c     **** }
 470               		.stabn	68,0,247,.LM42-.LFBB6
 471               	.LM42:
 472 0026 0F90      		pop __tmp_reg__
 473 0028 DF91      		pop r29
 474 002a CF91      		pop r28
 475 002c 0895      		ret
 476               		.size	USB_RecvNB, .-USB_RecvNB
 477               		.stabs	"c:(1,1)",128,0,243,1
 478               		.stabn	192,0,0,.LFBB6-.LFBB6
 479               		.stabn	224,0,0,.Lscope6-.LFBB6
 480               	.Lscope6:
 481               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 482               		.stabd	78,0,0
GAS LISTING /tmp/cc8D9STo.s 			page 14


 483               		.section	.text.USB_SendSpace,"ax",@progbits
 484               		.stabs	"USB_SendSpace:F(1,1)",36,0,250,USB_SendSpace
 485               		.stabs	"ep:P(1,1)",64,0,250,24
 486               	.global	USB_SendSpace
 487               		.type	USB_SendSpace, @function
 488               	USB_SendSpace:
 489               		.stabd	46,0,0
 248:USBCore.c     **** 
 249:USBCore.c     **** //	Space in send EP
 250:USBCore.c     **** u8 USB_SendSpace(u8 ep)
 251:USBCore.c     **** {
 490               		.stabn	68,0,251,.LM43-.LFBB7
 491               	.LM43:
 492               	.LFBB7:
 493 0000 CF93      		push r28
 494               	/* prologue: function */
 495               	/* frame size = 0 */
 496               	/* stack size = 1 */
 497               	.L__stack_usage = 1
 252:USBCore.c     ****   LockEP(ep);
 498               		.stabn	68,0,252,.LM44-.LFBB7
 499               	.LM44:
 500 0002 0E94 0000 		call LockEP
 501               	.LBB111:
 502               	.LBB112:
 160:USBCore.c     **** }
 503               		.stabn	68,0,160,.LM45-.LFBB7
 504               	.LM45:
 505 0006 8091 E800 		lds r24,232
 506               	.LBE112:
 507               	.LBE111:
 253:USBCore.c     ****   if (!ReadWriteAllowed()){
 508               		.stabn	68,0,253,.LM46-.LFBB7
 509               	.LM46:
 510 000a C82F      		mov r28,r24
 511 000c C072      		andi r28,lo8(32)
 512 000e 85FD      		sbrc r24,5
 513 0010 00C0      		rjmp .L26
 254:USBCore.c     ****     unLockEP();
 514               		.stabn	68,0,254,.LM47-.LFBB7
 515               	.LM47:
 516 0012 0E94 0000 		call unLockEP
 255:USBCore.c     ****     return 0;
 517               		.stabn	68,0,255,.LM48-.LFBB7
 518               	.LM48:
 519 0016 00C0      		rjmp .L27
 520               	.L26:
 521               	.LBB113:
 522               	.LBB114:
 256:USBCore.c     ****   }
 257:USBCore.c     ****   unLockEP();
 523               		.stabn	68,0,257,.LM49-.LFBB7
 524               	.LM49:
 525 0018 0E94 0000 		call unLockEP
 526               	.LBB115:
 527               	.LBB116:
 140:USBCore.c     **** }
GAS LISTING /tmp/cc8D9STo.s 			page 15


 528               		.stabn	68,0,140,.LM50-.LFBB7
 529               	.LM50:
 530 001c 8091 F200 		lds r24,242
 531               	.LBE116:
 532               	.LBE115:
 258:USBCore.c     ****   return 64 - FifoByteCount();
 533               		.stabn	68,0,258,.LM51-.LFBB7
 534               	.LM51:
 535 0020 C0E4      		ldi r28,lo8(64)
 536 0022 C81B      		sub r28,r24
 537               	.L27:
 538               	.LBE114:
 539               	.LBE113:
 259:USBCore.c     **** }
 540               		.stabn	68,0,259,.LM52-.LFBB7
 541               	.LM52:
 542 0024 8C2F      		mov r24,r28
 543               	/* epilogue start */
 544 0026 CF91      		pop r28
 545 0028 0895      		ret
 546               		.size	USB_SendSpace, .-USB_SendSpace
 547               	.Lscope7:
 548               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 549               		.stabd	78,0,0
 550               		.section	.text.USB_Send,"ax",@progbits
 551               		.stabs	"USB_Send:F(0,1)",36,0,262,USB_Send
 552               		.stabs	"ep:P(1,1)",64,0,262,12
 553               		.stabs	"d:P(0,52)=*(0,53)=k(0,49)",64,0,262,14
 554               	.global	USB_Send
 555               		.type	USB_Send, @function
 556               	USB_Send:
 557               		.stabd	46,0,0
 260:USBCore.c     **** 
 261:USBCore.c     **** //	Blocking Send of data to an endpoint
 262:USBCore.c     **** int USB_Send(u8 ep, const void* d, int len)
 263:USBCore.c     **** {
 558               		.stabn	68,0,263,.LM53-.LFBB8
 559               	.LM53:
 560               	.LFBB8:
 561 0000 6F92      		push r6
 562 0002 7F92      		push r7
 563 0004 8F92      		push r8
 564 0006 9F92      		push r9
 565 0008 AF92      		push r10
 566 000a BF92      		push r11
 567 000c CF92      		push r12
 568 000e DF92      		push r13
 569 0010 EF92      		push r14
 570 0012 FF92      		push r15
 571 0014 0F93      		push r16
 572 0016 1F93      		push r17
 573 0018 CF93      		push r28
 574 001a DF93      		push r29
 575               	/* prologue: function */
 576               	/* frame size = 0 */
 577               	/* stack size = 14 */
 578               	.L__stack_usage = 14
GAS LISTING /tmp/cc8D9STo.s 			page 16


 579 001c C82E      		mov r12,r24
 580 001e 7B01      		movw r14,r22
 581 0020 D42E      		mov r13,r20
 582 0022 D52F      		mov r29,r21
 264:USBCore.c     ****   if (!_usbConfiguration)
 583               		.stabn	68,0,264,.LM54-.LFBB8
 584               	.LM54:
 585 0024 8091 0000 		lds r24,_usbConfiguration
 586 0028 8823      		tst r24
 587 002a 01F0      		breq .L29
 588 002c 042F      		mov r16,r20
 589 002e 152F      		mov r17,r21
 590 0030 8AEF      		ldi r24,lo8(-6)
 591 0032 982E      		mov r9,r24
 592               	.LBB117:
 265:USBCore.c     ****     return -1;
 266:USBCore.c     **** 
 267:USBCore.c     ****   int r = len;
 268:USBCore.c     ****   const u8* data = (const u8*)d;
 269:USBCore.c     ****   //  u8 zero = ep & TRANSFER_ZERO;
 270:USBCore.c     ****   u8 timeout = 250;		// 250ms timeout on send? TODO
 271:USBCore.c     ****   while (len)
 272:USBCore.c     ****     {
 273:USBCore.c     ****       u8 n = USB_SendSpace(ep);
 274:USBCore.c     ****       if (n == 0)
 275:USBCore.c     **** 	{
 276:USBCore.c     **** 	  if (!(--timeout))
 277:USBCore.c     **** 	    return -1;
 278:USBCore.c     **** 	  _delay_ms(1);
 279:USBCore.c     **** 	  continue;
 280:USBCore.c     **** 	}
 281:USBCore.c     **** 
 282:USBCore.c     ****       if (n > len)
 283:USBCore.c     **** 	n = len;
 284:USBCore.c     ****       len -= n;
 285:USBCore.c     ****       {
 286:USBCore.c     **** 	LockEP(ep);
 287:USBCore.c     **** 	if (ep & TRANSFER_ZERO)
 593               		.stabn	68,0,287,.LM55-.LFBB8
 594               	.LM55:
 595 0034 8C2D      		mov r24,r12
 596 0036 8072      		andi r24,lo8(32)
 597 0038 882E      		mov r8,r24
 598               	.LBB118:
 599               	.LBB119:
 180:USBCore.c     **** }
 600               		.stabn	68,0,180,.LM56-.LFBB8
 601               	.LM56:
 602 003a 9AE3      		ldi r25,lo8(58)
 603 003c 792E      		mov r7,r25
 604               	.LBE119:
 605               	.LBE118:
 288:USBCore.c     **** 	  {
 289:USBCore.c     **** 	    while (n--)
 290:USBCore.c     **** 	      Send8(0);
 291:USBCore.c     **** 	  }
 292:USBCore.c     **** 	else if (ep & TRANSFER_PGM)
GAS LISTING /tmp/cc8D9STo.s 			page 17


 293:USBCore.c     **** 	  {
 294:USBCore.c     **** 	    while (n--)
 295:USBCore.c     **** 	      Send8(pgm_read_byte(data++));
 296:USBCore.c     **** 	  }
 297:USBCore.c     **** 	else
 298:USBCore.c     **** 	  {
 299:USBCore.c     **** 	    while (n--)
 300:USBCore.c     **** 	      Send8(*data++);
 301:USBCore.c     **** 	  }
 302:USBCore.c     **** 	if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
 606               		.stabn	68,0,302,.LM57-.LFBB8
 607               	.LM57:
 608 003e 9C2D      		mov r25,r12
 609 0040 9074      		andi r25,lo8(64)
 610 0042 692E      		mov r6,r25
 611 0044 00C0      		rjmp .L30
 612               	.L29:
 613               	.LBE117:
 265:USBCore.c     **** 
 614               		.stabn	68,0,265,.LM58-.LFBB8
 615               	.LM58:
 616 0046 8FEF      		ldi r24,lo8(-1)
 617 0048 9FEF      		ldi r25,lo8(-1)
 618 004a 00C0      		rjmp .L31
 619               	.L46:
 620               	.LBB133:
 273:USBCore.c     ****       if (n == 0)
 621               		.stabn	68,0,273,.LM59-.LFBB8
 622               	.LM59:
 623 004c 8C2D      		mov r24,r12
 624 004e 0E94 0000 		call USB_SendSpace
 625 0052 C82F      		mov r28,r24
 274:USBCore.c     **** 	{
 626               		.stabn	68,0,274,.LM60-.LFBB8
 627               	.LM60:
 628 0054 8111      		cpse r24,__zero_reg__
 629 0056 00C0      		rjmp .L32
 276:USBCore.c     **** 	    return -1;
 630               		.stabn	68,0,276,.LM61-.LFBB8
 631               	.LM61:
 632 0058 9A94      		dec r9
 633 005a 9920      		tst r9
 634 005c 01F0      		breq .L29
 635               	.LBB121:
 636               	.LBB122:
 637               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 638               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
GAS LISTING /tmp/cc8D9STo.s 			page 18


  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
GAS LISTING /tmp/cc8D9STo.s 			page 19


  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
GAS LISTING /tmp/cc8D9STo.s 			page 20


 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
GAS LISTING /tmp/cc8D9STo.s 			page 21


 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 639               		.stabn	68,0,187,.LM62-.LFBB8
 640               	.LM62:
 641 005e 8FE9      		ldi r24,lo8(3999)
 642 0060 9FE0      		ldi r25,hi8(3999)
 643 0062 0197      	1:	sbiw r24,1
 644 0064 01F4      		brne 1b
 645 0066 00C0      		rjmp .
 646 0068 0000      		nop
 647               	.L30:
 648               	.LBE122:
 649               	.LBE121:
 650               	.LBE133:
 651               		.stabs	"USBCore.c",132,0,0,.Ltext2
 652               	.Ltext2:
 271:USBCore.c     ****     {
 653               		.stabn	68,0,271,.LM63-.LFBB8
 654               	.LM63:
 655 006a 0115      		cp r16,__zero_reg__
 656 006c 1105      		cpc r17,__zero_reg__
 657 006e 01F4      		brne .L46
 658 0070 00C0      		rjmp .L60
 659               	.L32:
 660               	.LBB134:
 282:USBCore.c     **** 	n = len;
 661               		.stabn	68,0,282,.LM64-.LFBB8
 662               	.LM64:
 663 0072 90E0      		ldi r25,0
 664 0074 0817      		cp r16,r24
 665 0076 1907      		cpc r17,r25
 666 0078 04F4      		brge .L34
 283:USBCore.c     ****       len -= n;
 667               		.stabn	68,0,283,.LM65-.LFBB8
 668               	.LM65:
 669 007a C02F      		mov r28,r16
 670               	.L34:
 284:USBCore.c     ****       {
 671               		.stabn	68,0,284,.LM66-.LFBB8
 672               	.LM66:
 673 007c AC2E      		mov r10,r28
 674 007e B12C      		mov r11,__zero_reg__
 675 0080 0A19      		sub r16,r10
 676 0082 1B09      		sbc r17,r11
 286:USBCore.c     **** 	if (ep & TRANSFER_ZERO)
 677               		.stabn	68,0,286,.LM67-.LFBB8
 678               	.LM67:
 679 0084 8C2D      		mov r24,r12
 680 0086 0E94 0000 		call LockEP
 287:USBCore.c     **** 	  {
 681               		.stabn	68,0,287,.LM68-.LFBB8
 682               	.LM68:
 683 008a 8820      		tst r8
GAS LISTING /tmp/cc8D9STo.s 			page 22


 684 008c 01F0      		breq .L35
 685               	.L36:
 289:USBCore.c     **** 	      Send8(0);
 686               		.stabn	68,0,289,.LM69-.LFBB8
 687               	.LM69:
 688 008e C150      		subi r28,1
 689 0090 00F0      		brcs .L38
 690               	.LBB123:
 691               	.LBB124:
 130:USBCore.c     **** }
 692               		.stabn	68,0,130,.LM70-.LFBB8
 693               	.LM70:
 694 0092 1092 F100 		sts 241,__zero_reg__
 695 0096 00C0      		rjmp .L36
 696               	.L35:
 697               	.LBE124:
 698               	.LBE123:
 292:USBCore.c     **** 	  {
 699               		.stabn	68,0,292,.LM71-.LFBB8
 700               	.LM71:
 701 0098 F701      		movw r30,r14
 702 009a C7FE      		sbrs r12,7
 703 009c 00C0      		rjmp .L40
 704               	.L41:
 294:USBCore.c     **** 	      Send8(pgm_read_byte(data++));
 705               		.stabn	68,0,294,.LM72-.LFBB8
 706               	.LM72:
 707 009e C150      		subi r28,1
 708 00a0 00F0      		brcs .L59
 709               	.LBB125:
 295:USBCore.c     **** 	  }
 710               		.stabn	68,0,295,.LM73-.LFBB8
 711               	.LM73:
 712               	/* #APP */
 713               	 ;  295 "USBCore.c" 1
 714 00a2 8491      		lpm r24, Z
 715               		
 716               	 ;  0 "" 2
 717               	/* #NOAPP */
 718               	.LBE125:
 719               	.LBB126:
 720               	.LBB127:
 130:USBCore.c     **** }
 721               		.stabn	68,0,130,.LM74-.LFBB8
 722               	.LM74:
 723 00a4 8093 F100 		sts 241,r24
 724 00a8 3196      		adiw r30,1
 725 00aa 00C0      		rjmp .L41
 726               	.L40:
 727               	.LBE127:
 728               	.LBE126:
 299:USBCore.c     **** 	      Send8(*data++);
 729               		.stabn	68,0,299,.LM75-.LFBB8
 730               	.LM75:
 731 00ac C150      		subi r28,1
 732 00ae 00F0      		brcs .L59
 300:USBCore.c     **** 	  }
GAS LISTING /tmp/cc8D9STo.s 			page 23


 733               		.stabn	68,0,300,.LM76-.LFBB8
 734               	.LM76:
 735 00b0 8191      		ld r24,Z+
 736               	.LBB128:
 737               	.LBB129:
 130:USBCore.c     **** }
 738               		.stabn	68,0,130,.LM77-.LFBB8
 739               	.LM77:
 740 00b2 8093 F100 		sts 241,r24
 741 00b6 00C0      		rjmp .L40
 742               	.L59:
 743 00b8 EA0C      		add r14,r10
 744 00ba FB1C      		adc r15,r11
 745               	.L38:
 746               	.LBE129:
 747               	.LBE128:
 748               	.LBB130:
 749               	.LBB131:
 160:USBCore.c     **** }
 750               		.stabn	68,0,160,.LM78-.LFBB8
 751               	.LM78:
 752 00bc 8091 E800 		lds r24,232
 753               	.LBE131:
 754               	.LBE130:
 755               		.stabn	68,0,302,.LM79-.LFBB8
 756               	.LM79:
 757 00c0 85FF      		sbrs r24,5
 758 00c2 00C0      		rjmp .L44
 759               		.stabn	68,0,302,.LM80-.LFBB8
 760               	.LM80:
 761 00c4 0115      		cp r16,__zero_reg__
 762 00c6 1105      		cpc r17,__zero_reg__
 763 00c8 01F4      		brne .L45
 764               		.stabn	68,0,302,.LM81-.LFBB8
 765               	.LM81:
 766 00ca 6110      		cpse r6,__zero_reg__
 767               	.L44:
 768               	.LBB132:
 769               	.LBB120:
 180:USBCore.c     **** }
 770               		.stabn	68,0,180,.LM82-.LFBB8
 771               	.LM82:
 772 00cc 7092 E800 		sts 232,r7
 773               	.L45:
 774               	.LBE120:
 775               	.LBE132:
 303:USBCore.c     **** 	  ReleaseTX();
 304:USBCore.c     **** 	unLockEP();
 776               		.stabn	68,0,304,.LM83-.LFBB8
 777               	.LM83:
 778 00d0 0E94 0000 		call unLockEP
 779 00d4 00C0      		rjmp .L30
 780               	.L60:
 781               	.LBE134:
 305:USBCore.c     ****       }
 306:USBCore.c     ****     }
 307:USBCore.c     ****   TXLED1;					// light the TX LED
GAS LISTING /tmp/cc8D9STo.s 			page 24


 782               		.stabn	68,0,307,.LM84-.LFBB8
 783               	.LM84:
 784 00d6 5D98      		cbi 0xb,5
 308:USBCore.c     ****   TxLEDPulse = TX_RX_LED_PULSE_MS;
 785               		.stabn	68,0,308,.LM85-.LFBB8
 786               	.LM85:
 787 00d8 84E6      		ldi r24,lo8(100)
 788 00da 8093 0000 		sts TxLEDPulse,r24
 309:USBCore.c     ****   return r;
 789               		.stabn	68,0,309,.LM86-.LFBB8
 790               	.LM86:
 791 00de 8D2D      		mov r24,r13
 792 00e0 9D2F      		mov r25,r29
 793               	.L31:
 794               	/* epilogue start */
 310:USBCore.c     **** }
 795               		.stabn	68,0,310,.LM87-.LFBB8
 796               	.LM87:
 797 00e2 DF91      		pop r29
 798 00e4 CF91      		pop r28
 799 00e6 1F91      		pop r17
 800 00e8 0F91      		pop r16
 801 00ea FF90      		pop r15
 802 00ec EF90      		pop r14
 803 00ee DF90      		pop r13
 804 00f0 CF90      		pop r12
 805 00f2 BF90      		pop r11
 806 00f4 AF90      		pop r10
 807 00f6 9F90      		pop r9
 808 00f8 8F90      		pop r8
 809 00fa 7F90      		pop r7
 810 00fc 6F90      		pop r6
 811 00fe 0895      		ret
 812               		.size	USB_Send, .-USB_Send
 813               		.stabs	"timeout:r(1,1)",64,0,270,9
 814               		.stabn	192,0,0,.LFBB8-.LFBB8
 815               		.stabs	"__addr16:r(8,4)",64,0,295,30
 816               		.stabn	192,0,0,.LBB125-.LFBB8
 817               		.stabn	224,0,0,.LBE125-.LFBB8
 818               		.stabn	224,0,0,.Lscope8-.LFBB8
 819               	.Lscope8:
 820               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 821               		.stabd	78,0,0
 822               		.section	.text.InitControl,"ax",@progbits
 823               		.stabs	"InitControl:F(0,49)",36,0,374,InitControl
 824               		.stabs	"end:P(0,1)",64,0,374,24
 825               	.global	InitControl
 826               		.type	InitControl, @function
 827               	InitControl:
 828               		.stabd	46,0,0
 311:USBCore.c     **** 
 312:USBCore.c     **** extern const u8 _initEndpoints[] PROGMEM;
 313:USBCore.c     **** const u8 _initEndpoints[] = 
 314:USBCore.c     ****   {
 315:USBCore.c     ****     0,
 316:USBCore.c     **** 	
 317:USBCore.c     **** #ifdef CDC_ENABLED
GAS LISTING /tmp/cc8D9STo.s 			page 25


 318:USBCore.c     ****     EP_TYPE_INTERRUPT_IN,		// CDC_ENDPOINT_ACM
 319:USBCore.c     ****     EP_TYPE_BULK_OUT,			// CDC_ENDPOINT_OUT
 320:USBCore.c     ****     EP_TYPE_BULK_IN,			// CDC_ENDPOINT_IN
 321:USBCore.c     **** #endif
 322:USBCore.c     **** 
 323:USBCore.c     **** #ifdef HID_ENABLED
 324:USBCore.c     ****     EP_TYPE_INTERRUPT_IN		// HID_ENDPOINT_INT
 325:USBCore.c     **** #endif
 326:USBCore.c     ****   };
 327:USBCore.c     **** 
 328:USBCore.c     **** #define EP_SINGLE_64 0x32	// EP0
 329:USBCore.c     **** #define EP_DOUBLE_64 0x36	// Other endpoints
 330:USBCore.c     **** 
 331:USBCore.c     **** static
 332:USBCore.c     **** void InitEP(u8 index, u8 type, u8 size)
 333:USBCore.c     **** {
 334:USBCore.c     ****   UENUM = index;
 335:USBCore.c     ****   UECONX = 1;
 336:USBCore.c     ****   UECFG0X = type;
 337:USBCore.c     ****   UECFG1X = size;
 338:USBCore.c     **** }
 339:USBCore.c     **** 
 340:USBCore.c     **** static
 341:USBCore.c     **** void InitEndpoints()
 342:USBCore.c     **** {
 343:USBCore.c     ****   u8 i;
 344:USBCore.c     ****   for (i = 1; i < sizeof(_initEndpoints); i++)
 345:USBCore.c     ****     {
 346:USBCore.c     ****       UENUM = i;
 347:USBCore.c     ****       UECONX = 1;
 348:USBCore.c     ****       UECFG0X = pgm_read_byte(_initEndpoints+i);
 349:USBCore.c     ****       UECFG1X = EP_DOUBLE_64;
 350:USBCore.c     ****     }
 351:USBCore.c     ****   UERST = 0x7E;	// And reset them
 352:USBCore.c     ****   UERST = 0;
 353:USBCore.c     **** }
 354:USBCore.c     **** 
 355:USBCore.c     **** //	Handle CLASS_INTERFACE requests
 356:USBCore.c     **** static bool ClassInterfaceRequest(Setup *setup)
 357:USBCore.c     **** {
 358:USBCore.c     ****   u8 i = setup->wIndex;
 359:USBCore.c     **** 
 360:USBCore.c     **** #ifdef CDC_ENABLED
 361:USBCore.c     ****   if (CDC_ACM_INTERFACE == i)
 362:USBCore.c     ****     return CDC_Setup(setup);
 363:USBCore.c     **** #endif
 364:USBCore.c     **** 
 365:USBCore.c     **** #ifdef HID_ENABLED
 366:USBCore.c     ****   if (HID_INTERFACE == i)
 367:USBCore.c     ****     return HID_Setup(& setup);
 368:USBCore.c     **** #endif
 369:USBCore.c     ****   return false;
 370:USBCore.c     **** }
 371:USBCore.c     **** 
 372:USBCore.c     **** int _cmark;
 373:USBCore.c     **** int _cend;
 374:USBCore.c     **** void InitControl(int end)
GAS LISTING /tmp/cc8D9STo.s 			page 26


 375:USBCore.c     **** {
 829               		.stabn	68,0,375,.LM88-.LFBB9
 830               	.LM88:
 831               	.LFBB9:
 832               	/* prologue: function */
 833               	/* frame size = 0 */
 834               	/* stack size = 0 */
 835               	.L__stack_usage = 0
 836               	.LBB135:
 837               	.LBB136:
 135:USBCore.c     **** }
 838               		.stabn	68,0,135,.LM89-.LFBB9
 839               	.LM89:
 840 0000 1092 E900 		sts 233,__zero_reg__
 841               	.LBE136:
 842               	.LBE135:
 376:USBCore.c     ****   SetEP(0);
 377:USBCore.c     ****   _cmark = 0;
 843               		.stabn	68,0,377,.LM90-.LFBB9
 844               	.LM90:
 845 0004 1092 0000 		sts _cmark+1,__zero_reg__
 846 0008 1092 0000 		sts _cmark,__zero_reg__
 378:USBCore.c     ****   _cend = end;
 847               		.stabn	68,0,378,.LM91-.LFBB9
 848               	.LM91:
 849 000c 9093 0000 		sts _cend+1,r25
 850 0010 8093 0000 		sts _cend,r24
 851 0014 0895      		ret
 852               		.size	InitControl, .-InitControl
 853               	.Lscope9:
 854               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 855               		.stabd	78,0,0
 856               		.section	.text.USB_SendControl,"ax",@progbits
 857               		.stabs	"USB_SendControl:F(0,1)",36,0,397,USB_SendControl
 858               		.stabs	"flags:P(1,1)",64,0,397,24
 859               		.stabs	"d:P(0,52)",64,0,397,22
 860               		.stabs	"len:P(0,1)",64,0,397,20
 861               	.global	USB_SendControl
 862               		.type	USB_SendControl, @function
 863               	USB_SendControl:
 864               		.stabd	46,0,0
 379:USBCore.c     **** }
 380:USBCore.c     **** 
 381:USBCore.c     **** static
 382:USBCore.c     **** bool SendControl(u8 d)
 383:USBCore.c     **** {
 384:USBCore.c     ****   if (_cmark < _cend)
 385:USBCore.c     ****     {
 386:USBCore.c     ****       if (!WaitForINOrOUT())
 387:USBCore.c     **** 	return false;
 388:USBCore.c     ****       Send8(d);
 389:USBCore.c     ****       if (!((_cmark + 1) & 0x3F))
 390:USBCore.c     **** 	ClearIN();	// Fifo is full, release this packet
 391:USBCore.c     ****     }
 392:USBCore.c     ****   _cmark++;
 393:USBCore.c     ****   return true;
 394:USBCore.c     **** };
GAS LISTING /tmp/cc8D9STo.s 			page 27


 395:USBCore.c     **** 
 396:USBCore.c     **** //	Clipped by _cmark/_cend
 397:USBCore.c     **** int USB_SendControl(u8 flags, const void* d, int len)
 398:USBCore.c     **** {
 865               		.stabn	68,0,398,.LM92-.LFBB10
 866               	.LM92:
 867               	.LFBB10:
 868 0000 0F93      		push r16
 869 0002 1F93      		push r17
 870 0004 CF93      		push r28
 871 0006 DF93      		push r29
 872               	/* prologue: function */
 873               	/* frame size = 0 */
 874               	/* stack size = 4 */
 875               	.L__stack_usage = 4
 399:USBCore.c     ****   int sent = len;
 400:USBCore.c     ****   const u8* data = (const u8*)d;
 401:USBCore.c     ****   bool pgm = flags & TRANSFER_PGM;
 876               		.stabn	68,0,401,.LM93-.LFBB10
 877               	.LM93:
 878 0008 8078      		andi r24,lo8(-128)
 879 000a DB01      		movw r26,r22
 880 000c A40F      		add r26,r20
 881 000e B51F      		adc r27,r21
 402:USBCore.c     ****   while (len--)
 882               		.stabn	68,0,402,.LM94-.LFBB10
 883               	.LM94:
 884 0010 FB01      		movw r30,r22
 885               	.LBB147:
 886               	.LBB148:
 887               	.LBB149:
 888               	.LBB150:
 889               	.LBB151:
  92:USBCore.c     **** }
 890               		.stabn	68,0,92,.LM95-.LFBB10
 891               	.LM95:
 892 0012 6EEF      		ldi r22,lo8(-2)
 893               	.L63:
 894               	.LBE151:
 895               	.LBE150:
 896               	.LBE149:
 897               	.LBE148:
 898               	.LBE147:
 899               		.stabn	68,0,402,.LM96-.LFBB10
 900               	.LM96:
 901 0014 EA17      		cp r30,r26
 902 0016 FB07      		cpc r31,r27
 903 0018 01F0      		breq .L75
 904               	.LBB161:
 403:USBCore.c     ****     {
 404:USBCore.c     ****       u8 c = pgm ? pgm_read_byte(data++) : *data++;
 905               		.stabn	68,0,404,.LM97-.LFBB10
 906               	.LM97:
 907 001a 8823      		tst r24
 908 001c 01F0      		breq .L64
 909               	.LBB159:
 910               		.stabn	68,0,404,.LM98-.LFBB10
GAS LISTING /tmp/cc8D9STo.s 			page 28


 911               	.LM98:
 912               	/* #APP */
 913               	 ;  404 "USBCore.c" 1
 914 001e 2491      		lpm r18, Z
 915               		
 916               	 ;  0 "" 2
 917               	/* #NOAPP */
 918               	.LBE159:
 919 0020 00C0      		rjmp .L65
 920               	.L64:
 921               		.stabn	68,0,404,.LM99-.LFBB10
 922               	.LM99:
 923 0022 2081      		ld r18,Z
 924               	.L65:
 925               	.LBB160:
 926               	.LBB158:
 384:USBCore.c     ****     {
 927               		.stabn	68,0,384,.LM100-.LFBB10
 928               	.LM100:
 929 0024 0091 0000 		lds r16,_cmark
 930 0028 1091 0000 		lds r17,_cmark+1
 931 002c C091 0000 		lds r28,_cend
 932 0030 D091 0000 		lds r29,_cend+1
 933 0034 0C17      		cp r16,r28
 934 0036 1D07      		cpc r17,r29
 935 0038 04F4      		brge .L67
 936               	.L73:
 937               	.LBB153:
 938               	.LBB154:
 102:USBCore.c     ****   return (UEINTX & (1<<RXOUTI)) == 0;
 939               		.stabn	68,0,102,.LM101-.LFBB10
 940               	.LM101:
 941 003a 9091 E800 		lds r25,232
 942 003e 9570      		andi r25,lo8(5)
 943 0040 01F0      		breq .L73
 103:USBCore.c     **** }
 944               		.stabn	68,0,103,.LM102-.LFBB10
 945               	.LM102:
 946 0042 9091 E800 		lds r25,232
 947               	.LBE154:
 948               	.LBE153:
 386:USBCore.c     **** 	return false;
 949               		.stabn	68,0,386,.LM103-.LFBB10
 950               	.LM103:
 951 0046 92FD      		sbrc r25,2
 952 0048 00C0      		rjmp .L71
 953               	.LBB155:
 954               	.LBB156:
 130:USBCore.c     **** }
 955               		.stabn	68,0,130,.LM104-.LFBB10
 956               	.LM104:
 957 004a 2093 F100 		sts 241,r18
 958               	.LBE156:
 959               	.LBE155:
 389:USBCore.c     **** 	ClearIN();	// Fifo is full, release this packet
 960               		.stabn	68,0,389,.LM105-.LFBB10
 961               	.LM105:
GAS LISTING /tmp/cc8D9STo.s 			page 29


 962 004e 2091 0000 		lds r18,_cmark
 963 0052 3091 0000 		lds r19,_cmark+1
 964 0056 2F5F      		subi r18,-1
 965 0058 3F4F      		sbci r19,-1
 966 005a 2F73      		andi r18,63
 967 005c 3327      		clr r19
 968 005e 232B      		or r18,r19
 969 0060 01F4      		brne .L67
 970               	.LBB157:
 971               	.LBB152:
  92:USBCore.c     **** }
 972               		.stabn	68,0,92,.LM106-.LFBB10
 973               	.LM106:
 974 0062 6093 E800 		sts 232,r22
 975               	.L67:
 976               	.LBE152:
 977               	.LBE157:
 392:USBCore.c     ****   return true;
 978               		.stabn	68,0,392,.LM107-.LFBB10
 979               	.LM107:
 980 0066 2091 0000 		lds r18,_cmark
 981 006a 3091 0000 		lds r19,_cmark+1
 982 006e 2F5F      		subi r18,-1
 983 0070 3F4F      		sbci r19,-1
 984 0072 3093 0000 		sts _cmark+1,r19
 985 0076 2093 0000 		sts _cmark,r18
 986 007a 3196      		adiw r30,1
 987 007c 00C0      		rjmp .L63
 988               	.L75:
 989               	.LBE158:
 990               	.LBE160:
 991               	.LBE161:
 405:USBCore.c     ****       if (!SendControl(c))
 406:USBCore.c     **** 	return -1;
 407:USBCore.c     ****     }
 408:USBCore.c     ****   return sent;
 992               		.stabn	68,0,408,.LM108-.LFBB10
 993               	.LM108:
 994 007e CA01      		movw r24,r20
 995 0080 00C0      		rjmp .L68
 996               	.L71:
 997               	.LBB162:
 406:USBCore.c     ****     }
 998               		.stabn	68,0,406,.LM109-.LFBB10
 999               	.LM109:
 1000 0082 8FEF      		ldi r24,lo8(-1)
 1001 0084 9FEF      		ldi r25,lo8(-1)
 1002               	.L68:
 1003               	/* epilogue start */
 1004               	.LBE162:
 409:USBCore.c     **** }
 1005               		.stabn	68,0,409,.LM110-.LFBB10
 1006               	.LM110:
 1007 0086 DF91      		pop r29
 1008 0088 CF91      		pop r28
 1009 008a 1F91      		pop r17
 1010 008c 0F91      		pop r16
GAS LISTING /tmp/cc8D9STo.s 			page 30


 1011 008e 0895      		ret
 1012               		.size	USB_SendControl, .-USB_SendControl
 1013               		.stabs	"pgm:r(1,5)",64,0,401,24
 1014               		.stabn	192,0,0,.LFBB10-.LFBB10
 1015               		.stabs	"c:r(1,1)",64,0,404,18
 1016               		.stabn	192,0,0,.LBB147-.LFBB10
 1017               		.stabs	"__addr16:r(8,4)",64,0,404,30
 1018               		.stabn	192,0,0,.LBB159-.LFBB10
 1019               		.stabn	224,0,0,.LBE159-.LFBB10
 1020               		.stabn	224,0,0,.LBE147-.LFBB10
 1021               		.stabs	"c:r(1,1)",64,0,404,18
 1022               		.stabn	192,0,0,.LBB161-.LFBB10
 1023               		.stabn	224,0,0,.LBE161-.LFBB10
 1024               		.stabs	"c:r(1,1)",64,0,404,18
 1025               		.stabn	192,0,0,.LBB162-.LFBB10
 1026               		.stabn	224,0,0,.LBE162-.LFBB10
 1027               		.stabn	224,0,0,.Lscope10-.LFBB10
 1028               	.Lscope10:
 1029               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 1030               		.stabd	78,0,0
 1031               		.section	.text.USB_RecvControl,"ax",@progbits
 1032               		.stabs	"USB_RecvControl:F(0,1)",36,0,414,USB_RecvControl
 1033               		.stabs	"d:P(0,54)=*(0,49)",64,0,414,24
 1034               	.global	USB_RecvControl
 1035               		.type	USB_RecvControl, @function
 1036               	USB_RecvControl:
 1037               		.stabd	46,0,0
 410:USBCore.c     **** 
 411:USBCore.c     **** //	Does not timeout or cross fifo boundaries
 412:USBCore.c     **** //	Will only work for transfers <= 64 bytes
 413:USBCore.c     **** //	TODO
 414:USBCore.c     **** int USB_RecvControl(void* d, int len)
 415:USBCore.c     **** {
 1038               		.stabn	68,0,415,.LM111-.LFBB11
 1039               	.LM111:
 1040               	.LFBB11:
 1041 0000 CF93      		push r28
 1042 0002 DF93      		push r29
 1043               	/* prologue: function */
 1044               	/* frame size = 0 */
 1045               	/* stack size = 2 */
 1046               	.L__stack_usage = 2
 1047 0004 EB01      		movw r28,r22
 1048               	.L77:
 1049               	.LBB167:
 1050               	.LBB168:
  97:USBCore.c     **** }
 1051               		.stabn	68,0,97,.LM112-.LFBB11
 1052               	.LM112:
 1053 0006 2091 E800 		lds r18,232
 1054 000a 22FF      		sbrs r18,2
 1055 000c 00C0      		rjmp .L77
 1056               	.LBE168:
 1057               	.LBE167:
 416:USBCore.c     ****   WaitOUT();
 417:USBCore.c     ****   Recv((u8*)d,len);
 1058               		.stabn	68,0,417,.LM113-.LFBB11
GAS LISTING /tmp/cc8D9STo.s 			page 31


 1059               	.LM113:
 1060 000e 6C2F      		mov r22,r28
 1061 0010 0E94 0000 		call Recv
 1062               	.LBB169:
 1063               	.LBB170:
 108:USBCore.c     **** }
 1064               		.stabn	68,0,108,.LM114-.LFBB11
 1065               	.LM114:
 1066 0014 8BEF      		ldi r24,lo8(-5)
 1067 0016 8093 E800 		sts 232,r24
 1068               	.LBE170:
 1069               	.LBE169:
 418:USBCore.c     ****   ClearOUT();
 419:USBCore.c     ****   return len;
 420:USBCore.c     **** }
 1070               		.stabn	68,0,420,.LM115-.LFBB11
 1071               	.LM115:
 1072 001a CE01      		movw r24,r28
 1073               	/* epilogue start */
 1074 001c DF91      		pop r29
 1075 001e CF91      		pop r28
 1076 0020 0895      		ret
 1077               		.size	USB_RecvControl, .-USB_RecvControl
 1078               	.Lscope11:
 1079               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 1080               		.stabd	78,0,0
 1081               		.section	.text.SendInterfaces,"ax",@progbits
 1082               		.stabs	"SendInterfaces:F(0,1)",36,0,422,SendInterfaces
 1083               	.global	SendInterfaces
 1084               		.type	SendInterfaces, @function
 1085               	SendInterfaces:
 1086               		.stabd	46,0,0
 421:USBCore.c     **** 
 422:USBCore.c     **** int SendInterfaces()
 423:USBCore.c     **** {
 1087               		.stabn	68,0,423,.LM116-.LFBB12
 1088               	.LM116:
 1089               	.LFBB12:
 1090 0000 CF93      		push r28
 1091 0002 DF93      		push r29
 1092 0004 1F92      		push __zero_reg__
 1093 0006 CDB7      		in r28,__SP_L__
 1094 0008 DEB7      		in r29,__SP_H__
 1095               	/* prologue: function */
 1096               	/* frame size = 1 */
 1097               	/* stack size = 3 */
 1098               	.L__stack_usage = 3
 424:USBCore.c     ****   u8 interfaces = 0;
 1099               		.stabn	68,0,424,.LM117-.LFBB12
 1100               	.LM117:
 1101 000a 1982      		std Y+1,__zero_reg__
 425:USBCore.c     ****   CDC_GetInterface(&interfaces);
 1102               		.stabn	68,0,425,.LM118-.LFBB12
 1103               	.LM118:
 1104 000c CE01      		movw r24,r28
 1105 000e 0196      		adiw r24,1
 1106 0010 0E94 0000 		call CDC_GetInterface
GAS LISTING /tmp/cc8D9STo.s 			page 32


 426:USBCore.c     ****   return interfaces;
 1107               		.stabn	68,0,426,.LM119-.LFBB12
 1108               	.LM119:
 1109 0014 8981      		ldd r24,Y+1
 427:USBCore.c     **** }
 1110               		.stabn	68,0,427,.LM120-.LFBB12
 1111               	.LM120:
 1112 0016 90E0      		ldi r25,0
 1113               	/* epilogue start */
 1114 0018 0F90      		pop __tmp_reg__
 1115 001a DF91      		pop r29
 1116 001c CF91      		pop r28
 1117 001e 0895      		ret
 1118               		.size	SendInterfaces, .-SendInterfaces
 1119               		.stabs	"interfaces:(1,1)",128,0,424,1
 1120               		.stabn	192,0,0,.LFBB12-.LFBB12
 1121               		.stabn	224,0,0,.Lscope12-.LFBB12
 1122               	.Lscope12:
 1123               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 1124               		.stabd	78,0,0
 1125               		.section	.text.__vector_11,"ax",@progbits
 1126               		.stabs	"__vector_11:F(0,49)",36,0,492,__vector_11
 1127               	.global	__vector_11
 1128               		.type	__vector_11, @function
 1129               	__vector_11:
 1130               		.stabd	46,0,0
 428:USBCore.c     **** 
 429:USBCore.c     **** //	Construct a dynamic configuration descriptor
 430:USBCore.c     **** //	This really needs dynamic endpoint allocation etc
 431:USBCore.c     **** //	TODO
 432:USBCore.c     **** static
 433:USBCore.c     **** bool SendConfiguration(int maxlen)
 434:USBCore.c     **** {
 435:USBCore.c     ****   //	Count and measure interfaces
 436:USBCore.c     ****   InitControl(0);	
 437:USBCore.c     ****   int interfaces = SendInterfaces();
 438:USBCore.c     ****   ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
 439:USBCore.c     **** 
 440:USBCore.c     ****   //	Now send them
 441:USBCore.c     ****   InitControl(maxlen);
 442:USBCore.c     ****   USB_SendControl(0,&config,sizeof(ConfigDescriptor));
 443:USBCore.c     ****   SendInterfaces();
 444:USBCore.c     ****   return true;
 445:USBCore.c     **** }
 446:USBCore.c     **** 
 447:USBCore.c     **** u8 _cdcComposite = 0;
 448:USBCore.c     **** 
 449:USBCore.c     **** static
 450:USBCore.c     **** bool SendDescriptor(Setup *setup)
 451:USBCore.c     **** {
 452:USBCore.c     ****   u8 t = setup->wValueH;
 453:USBCore.c     ****   if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
 454:USBCore.c     ****     return SendConfiguration(setup->wLength);
 455:USBCore.c     **** 
 456:USBCore.c     ****   InitControl(setup->wLength);
 457:USBCore.c     **** #ifdef HID_ENABLED
 458:USBCore.c     ****   if (HID_REPORT_DESCRIPTOR_TYPE == t)
GAS LISTING /tmp/cc8D9STo.s 			page 33


 459:USBCore.c     ****     return HID_GetDescriptor(t);
 460:USBCore.c     **** #endif
 461:USBCore.c     **** 
 462:USBCore.c     ****   u8 desc_length = 0;
 463:USBCore.c     ****   const u8* desc_addr = 0;
 464:USBCore.c     ****   if (USB_DEVICE_DESCRIPTOR_TYPE == t)
 465:USBCore.c     ****     {
 466:USBCore.c     ****       if (setup->wLength == 8)
 467:USBCore.c     **** 	_cdcComposite = 1;
 468:USBCore.c     ****       desc_addr = _cdcComposite ?  (const u8*)&USB_DeviceDescriptorA : (const u8*)&USB_DeviceDescri
 469:USBCore.c     ****     }
 470:USBCore.c     ****   else if (USB_STRING_DESCRIPTOR_TYPE == t)
 471:USBCore.c     ****     {
 472:USBCore.c     ****       if (setup->wValueL == 0)
 473:USBCore.c     **** 	desc_addr = (const u8*)&STRING_LANGUAGE;
 474:USBCore.c     ****       else if (setup->wValueL == IPRODUCT) 
 475:USBCore.c     **** 	desc_addr = (const u8*)&STRING_IPRODUCT;
 476:USBCore.c     ****       else if (setup->wValueL == IMANUFACTURER)
 477:USBCore.c     **** 	desc_addr = (const u8*)&STRING_IMANUFACTURER;
 478:USBCore.c     ****       else
 479:USBCore.c     **** 	return false;
 480:USBCore.c     ****     }
 481:USBCore.c     **** 
 482:USBCore.c     ****   if (desc_addr == 0)
 483:USBCore.c     ****     return false;
 484:USBCore.c     ****   if (desc_length == 0)
 485:USBCore.c     ****     desc_length = pgm_read_byte(desc_addr);
 486:USBCore.c     **** 
 487:USBCore.c     ****   USB_SendControl(TRANSFER_PGM,desc_addr,desc_length);
 488:USBCore.c     ****   return true;
 489:USBCore.c     **** }
 490:USBCore.c     **** 
 491:USBCore.c     **** //	Endpoint 0 interrupt
 492:USBCore.c     **** ISR(USB_COM_vect)
 493:USBCore.c     **** {
 1131               		.stabn	68,0,493,.LM121-.LFBB13
 1132               	.LM121:
 1133               	.LFBB13:
 1134 0000 1F92      		push r1
 1135 0002 0F92      		push r0
 1136 0004 0FB6      		in r0,__SREG__
 1137 0006 0F92      		push r0
 1138 0008 1124      		clr __zero_reg__
 1139 000a EF92      		push r14
 1140 000c FF92      		push r15
 1141 000e 1F93      		push r17
 1142 0010 2F93      		push r18
 1143 0012 3F93      		push r19
 1144 0014 4F93      		push r20
 1145 0016 5F93      		push r21
 1146 0018 6F93      		push r22
 1147 001a 7F93      		push r23
 1148 001c 8F93      		push r24
 1149 001e 9F93      		push r25
 1150 0020 AF93      		push r26
 1151 0022 BF93      		push r27
 1152 0024 EF93      		push r30
GAS LISTING /tmp/cc8D9STo.s 			page 34


 1153 0026 FF93      		push r31
 1154 0028 CF93      		push r28
 1155 002a DF93      		push r29
 1156 002c CDB7      		in r28,__SP_L__
 1157 002e DEB7      		in r29,__SP_H__
 1158 0030 6197      		sbiw r28,17
 1159 0032 DEBF      		out __SP_H__,r29
 1160 0034 CDBF      		out __SP_L__,r28
 1161               	/* prologue: Signal */
 1162               	/* frame size = 17 */
 1163               	/* stack size = 37 */
 1164               	.L__stack_usage = 37
 1165               	.LBB204:
 1166               	.LBB205:
 135:USBCore.c     **** }
 1167               		.stabn	68,0,135,.LM122-.LFBB13
 1168               	.LM122:
 1169 0036 1092 E900 		sts 233,__zero_reg__
 1170               	.LBE205:
 1171               	.LBE204:
 1172               	.LBB206:
 1173               	.LBB207:
 145:USBCore.c     **** }
 1174               		.stabn	68,0,145,.LM123-.LFBB13
 1175               	.LM123:
 1176 003a 8091 E800 		lds r24,232
 1177               	.LBE207:
 1178               	.LBE206:
 494:USBCore.c     ****   SetEP(0);
 495:USBCore.c     ****   if (!ReceivedSetupInt())
 1179               		.stabn	68,0,495,.LM124-.LFBB13
 1180               	.LM124:
 1181 003e 83FF      		sbrs r24,3
 1182 0040 00C0      		rjmp .L81
 496:USBCore.c     ****     return;
 497:USBCore.c     **** 
 498:USBCore.c     ****   Setup setup;
 499:USBCore.c     ****   Recv((u8*)&setup,8);
 1183               		.stabn	68,0,499,.LM125-.LFBB13
 1184               	.LM125:
 1185 0042 68E0      		ldi r22,lo8(8)
 1186 0044 CE01      		movw r24,r28
 1187 0046 0A96      		adiw r24,10
 1188 0048 0E94 0000 		call Recv
 1189               	.LBB208:
 1190               	.LBB209:
 150:USBCore.c     **** }
 1191               		.stabn	68,0,150,.LM126-.LFBB13
 1192               	.LM126:
 1193 004c 82EF      		ldi r24,lo8(-14)
 1194 004e 8093 E800 		sts 232,r24
 1195               	.LBE209:
 1196               	.LBE208:
 500:USBCore.c     ****   ClearSetupInt();
 501:USBCore.c     **** 
 502:USBCore.c     ****   u8 requestType = setup.bmRequestType;
 1197               		.stabn	68,0,502,.LM127-.LFBB13
GAS LISTING /tmp/cc8D9STo.s 			page 35


 1198               	.LM127:
 1199 0052 9A85      		ldd r25,Y+10
 503:USBCore.c     ****   if (requestType & REQUEST_DEVICETOHOST)
 1200               		.stabn	68,0,503,.LM128-.LFBB13
 1201               	.LM128:
 1202 0054 97FF      		sbrs r25,7
 1203 0056 00C0      		rjmp .L83
 1204               	.L115:
 1205               	.LBB210:
 1206               	.LBB211:
  87:USBCore.c     **** }
 1207               		.stabn	68,0,87,.LM129-.LFBB13
 1208               	.LM129:
 1209 0058 8091 E800 		lds r24,232
 1210 005c 80FF      		sbrs r24,0
 1211 005e 00C0      		rjmp .L115
 1212 0060 00C0      		rjmp .L85
 1213               	.L83:
 1214               	.LBE211:
 1215               	.LBE210:
 1216               	.LBB212:
 1217               	.LBB213:
  92:USBCore.c     **** }
 1218               		.stabn	68,0,92,.LM130-.LFBB13
 1219               	.LM130:
 1220 0062 8EEF      		ldi r24,lo8(-2)
 1221 0064 8093 E800 		sts 232,r24
 1222               	.L85:
 1223               	.LBE213:
 1224               	.LBE212:
 504:USBCore.c     ****     WaitIN();
 505:USBCore.c     ****   else
 506:USBCore.c     ****     ClearIN();
 507:USBCore.c     **** 
 508:USBCore.c     ****   bool ok = true;
 509:USBCore.c     ****   if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
 1225               		.stabn	68,0,509,.LM131-.LFBB13
 1226               	.LM131:
 1227 0068 892F      		mov r24,r25
 1228 006a 8076      		andi r24,lo8(96)
 1229 006c 01F0      		breq .+2
 1230 006e 00C0      		rjmp .L86
 1231               	.LBB214:
 510:USBCore.c     ****     {
 511:USBCore.c     ****       //	Standard Requests
 512:USBCore.c     ****       u8 r = setup.bRequest;
 1232               		.stabn	68,0,512,.LM132-.LFBB13
 1233               	.LM132:
 1234 0070 8B85      		ldd r24,Y+11
 513:USBCore.c     ****       if (GET_STATUS == r)
 1235               		.stabn	68,0,513,.LM133-.LFBB13
 1236               	.LM133:
 1237 0072 8111      		cpse r24,__zero_reg__
 1238 0074 00C0      		rjmp .L87
 1239               	.LBB215:
 1240               	.LBB216:
 130:USBCore.c     **** }
GAS LISTING /tmp/cc8D9STo.s 			page 36


 1241               		.stabn	68,0,130,.LM134-.LFBB13
 1242               	.LM134:
 1243 0076 1092 F100 		sts 241,__zero_reg__
 1244               	.LBE216:
 1245               	.LBE215:
 1246               	.LBB217:
 1247               	.LBB218:
 1248 007a 1092 F100 		sts 241,__zero_reg__
 1249 007e 00C0      		rjmp .L88
 1250               	.L87:
 1251               	.LBE218:
 1252               	.LBE217:
 514:USBCore.c     **** 	{
 515:USBCore.c     **** 	  Send8(0);		// TODO
 516:USBCore.c     **** 	  Send8(0);
 517:USBCore.c     **** 	}
 518:USBCore.c     ****       else if (CLEAR_FEATURE == r)
 1253               		.stabn	68,0,518,.LM135-.LFBB13
 1254               	.LM135:
 1255 0080 282F      		mov r18,r24
 1256 0082 2D7F      		andi r18,lo8(-3)
 1257 0084 2130      		cpi r18,lo8(1)
 1258 0086 01F4      		brne .+2
 1259 0088 00C0      		rjmp .L88
 519:USBCore.c     **** 	{
 520:USBCore.c     **** 	}
 521:USBCore.c     ****       else if (SET_FEATURE == r)
 522:USBCore.c     **** 	{
 523:USBCore.c     **** 	}
 524:USBCore.c     ****       else if (SET_ADDRESS == r)
 1260               		.stabn	68,0,524,.LM136-.LFBB13
 1261               	.LM136:
 1262 008a 8530      		cpi r24,lo8(5)
 1263 008c 01F4      		brne .L89
 1264               	.L90:
 1265               	.LBB219:
 1266               	.LBB220:
  87:USBCore.c     **** }
 1267               		.stabn	68,0,87,.LM137-.LFBB13
 1268               	.LM137:
 1269 008e 8091 E800 		lds r24,232
 1270 0092 80FF      		sbrs r24,0
 1271 0094 00C0      		rjmp .L90
 1272               	.LBE220:
 1273               	.LBE219:
 525:USBCore.c     **** 	{
 526:USBCore.c     **** 	  WaitIN();
 527:USBCore.c     **** 	  UDADDR = setup.wValueL | (1<<ADDEN);
 1274               		.stabn	68,0,527,.LM138-.LFBB13
 1275               	.LM138:
 1276 0096 8C85      		ldd r24,Y+12
 1277 0098 8068      		ori r24,lo8(-128)
 1278 009a 8093 E300 		sts 227,r24
 1279 009e 00C0      		rjmp .L88
 1280               	.L89:
 528:USBCore.c     **** 	}
 529:USBCore.c     ****       else if (GET_DESCRIPTOR == r)
GAS LISTING /tmp/cc8D9STo.s 			page 37


 1281               		.stabn	68,0,529,.LM139-.LFBB13
 1282               	.LM139:
 1283 00a0 8630      		cpi r24,lo8(6)
 1284 00a2 01F0      		breq .+2
 1285 00a4 00C0      		rjmp .L91
 1286               	.LBB221:
 1287               	.LBB222:
 452:USBCore.c     ****   if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
 1288               		.stabn	68,0,452,.LM140-.LFBB13
 1289               	.LM140:
 1290 00a6 1D85      		ldd r17,Y+13
 1291 00a8 E888      		ldd r14,Y+16
 1292 00aa F988      		ldd r15,Y+17
 453:USBCore.c     ****     return SendConfiguration(setup->wLength);
 1293               		.stabn	68,0,453,.LM141-.LFBB13
 1294               	.LM141:
 1295 00ac 1230      		cpi r17,lo8(2)
 1296 00ae 01F4      		brne .L92
 1297               	.LBB223:
 1298               	.LBB224:
 436:USBCore.c     ****   int interfaces = SendInterfaces();
 1299               		.stabn	68,0,436,.LM142-.LFBB13
 1300               	.LM142:
 1301 00b0 80E0      		ldi r24,0
 1302 00b2 90E0      		ldi r25,0
 1303 00b4 0E94 0000 		call InitControl
 437:USBCore.c     ****   ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
 1304               		.stabn	68,0,437,.LM143-.LFBB13
 1305               	.LM143:
 1306 00b8 0E94 0000 		call SendInterfaces
 438:USBCore.c     **** 
 1307               		.stabn	68,0,438,.LM144-.LFBB13
 1308               	.LM144:
 1309 00bc 99E0      		ldi r25,lo8(9)
 1310 00be 9983      		std Y+1,r25
 1311 00c0 1A83      		std Y+2,r17
 1312 00c2 2091 0000 		lds r18,_cmark
 1313 00c6 3091 0000 		lds r19,_cmark+1
 1314 00ca 275F      		subi r18,-9
 1315 00cc 3F4F      		sbci r19,-1
 1316 00ce 3C83      		std Y+4,r19
 1317 00d0 2B83      		std Y+3,r18
 1318 00d2 8D83      		std Y+5,r24
 1319 00d4 81E0      		ldi r24,lo8(1)
 1320 00d6 8E83      		std Y+6,r24
 1321 00d8 1F82      		std Y+7,__zero_reg__
 1322 00da 80E8      		ldi r24,lo8(-128)
 1323 00dc 8887      		std Y+8,r24
 1324 00de 8AEF      		ldi r24,lo8(-6)
 1325 00e0 8987      		std Y+9,r24
 441:USBCore.c     ****   USB_SendControl(0,&config,sizeof(ConfigDescriptor));
 1326               		.stabn	68,0,441,.LM145-.LFBB13
 1327               	.LM145:
 1328 00e2 C701      		movw r24,r14
 1329 00e4 0E94 0000 		call InitControl
 442:USBCore.c     ****   SendInterfaces();
 1330               		.stabn	68,0,442,.LM146-.LFBB13
GAS LISTING /tmp/cc8D9STo.s 			page 38


 1331               	.LM146:
 1332 00e8 49E0      		ldi r20,lo8(9)
 1333 00ea 50E0      		ldi r21,0
 1334 00ec BE01      		movw r22,r28
 1335 00ee 6F5F      		subi r22,-1
 1336 00f0 7F4F      		sbci r23,-1
 1337 00f2 80E0      		ldi r24,0
 1338 00f4 0E94 0000 		call USB_SendControl
 443:USBCore.c     ****   return true;
 1339               		.stabn	68,0,443,.LM147-.LFBB13
 1340               	.LM147:
 1341 00f8 0E94 0000 		call SendInterfaces
 1342 00fc 00C0      		rjmp .L88
 1343               	.L92:
 1344               	.LBE224:
 1345               	.LBE223:
 456:USBCore.c     **** #ifdef HID_ENABLED
 1346               		.stabn	68,0,456,.LM148-.LFBB13
 1347               	.LM148:
 1348 00fe C701      		movw r24,r14
 1349 0100 0E94 0000 		call InitControl
 464:USBCore.c     ****     {
 1350               		.stabn	68,0,464,.LM149-.LFBB13
 1351               	.LM149:
 1352 0104 1130      		cpi r17,lo8(1)
 1353 0106 01F4      		brne .L93
 466:USBCore.c     **** 	_cdcComposite = 1;
 1354               		.stabn	68,0,466,.LM150-.LFBB13
 1355               	.LM150:
 1356 0108 8889      		ldd r24,Y+16
 1357 010a 9989      		ldd r25,Y+17
 1358 010c 0897      		sbiw r24,8
 1359 010e 01F4      		brne .L94
 467:USBCore.c     ****       desc_addr = _cdcComposite ?  (const u8*)&USB_DeviceDescriptorA : (const u8*)&USB_DeviceDescri
 1360               		.stabn	68,0,467,.LM151-.LFBB13
 1361               	.LM151:
 1362 0110 1093 0000 		sts _cdcComposite,r17
 1363               	.L94:
 468:USBCore.c     ****     }
 1364               		.stabn	68,0,468,.LM152-.LFBB13
 1365               	.LM152:
 1366 0114 8091 0000 		lds r24,_cdcComposite
 1367 0118 8111      		cpse r24,__zero_reg__
 1368 011a 00C0      		rjmp .L102
 1369 011c 60E0      		ldi r22,lo8(USB_DeviceDescriptor)
 1370 011e 70E0      		ldi r23,hi8(USB_DeviceDescriptor)
 1371 0120 00C0      		rjmp .L95
 1372               	.L93:
 470:USBCore.c     ****     {
 1373               		.stabn	68,0,470,.LM153-.LFBB13
 1374               	.LM153:
 1375 0122 1330      		cpi r17,lo8(3)
 1376 0124 01F0      		breq .+2
 1377 0126 00C0      		rjmp .L96
 472:USBCore.c     **** 	desc_addr = (const u8*)&STRING_LANGUAGE;
 1378               		.stabn	68,0,472,.LM154-.LFBB13
 1379               	.LM154:
GAS LISTING /tmp/cc8D9STo.s 			page 39


 1380 0128 8C85      		ldd r24,Y+12
 1381 012a 8823      		tst r24
 1382 012c 01F4      		brne .+2
 1383 012e 00C0      		rjmp .L103
 474:USBCore.c     **** 	desc_addr = (const u8*)&STRING_IPRODUCT;
 1384               		.stabn	68,0,474,.LM155-.LFBB13
 1385               	.LM155:
 1386 0130 8230      		cpi r24,lo8(2)
 1387 0132 01F4      		brne .+2
 1388 0134 00C0      		rjmp .L104
 476:USBCore.c     **** 	desc_addr = (const u8*)&STRING_IMANUFACTURER;
 1389               		.stabn	68,0,476,.LM156-.LFBB13
 1390               	.LM156:
 1391 0136 8130      		cpi r24,lo8(1)
 1392 0138 01F0      		breq .+2
 1393 013a 00C0      		rjmp .L96
 477:USBCore.c     ****       else
 1394               		.stabn	68,0,477,.LM157-.LFBB13
 1395               	.LM157:
 1396 013c 60E0      		ldi r22,lo8(STRING_IMANUFACTURER)
 1397 013e 70E0      		ldi r23,hi8(STRING_IMANUFACTURER)
 1398 0140 00C0      		rjmp .L95
 1399               	.L91:
 1400               	.LBE222:
 1401               	.LBE221:
 530:USBCore.c     **** 	{
 531:USBCore.c     **** 	  ok = SendDescriptor(& setup);
 532:USBCore.c     **** 	}
 533:USBCore.c     ****       else if (SET_DESCRIPTOR == r)
 1402               		.stabn	68,0,533,.LM158-.LFBB13
 1403               	.LM158:
 1404 0142 8730      		cpi r24,lo8(7)
 1405 0144 01F4      		brne .+2
 1406 0146 00C0      		rjmp .L96
 534:USBCore.c     **** 	{
 535:USBCore.c     **** 	  ok = false;
 536:USBCore.c     **** 	}
 537:USBCore.c     ****       else if (GET_CONFIGURATION == r)
 1407               		.stabn	68,0,537,.LM159-.LFBB13
 1408               	.LM159:
 1409 0148 8830      		cpi r24,lo8(8)
 1410 014a 01F4      		brne .L98
 1411               	.LBB227:
 1412               	.LBB228:
 130:USBCore.c     **** }
 1413               		.stabn	68,0,130,.LM160-.LFBB13
 1414               	.LM160:
 1415 014c 81E0      		ldi r24,lo8(1)
 1416 014e 8093 F100 		sts 241,r24
 1417 0152 00C0      		rjmp .L88
 1418               	.L98:
 1419               	.LBE228:
 1420               	.LBE227:
 538:USBCore.c     **** 	{
 539:USBCore.c     **** 	  Send8(1);
 540:USBCore.c     **** 	}
 541:USBCore.c     ****       else if (SET_CONFIGURATION == r)
GAS LISTING /tmp/cc8D9STo.s 			page 40


 1421               		.stabn	68,0,541,.LM161-.LFBB13
 1422               	.LM161:
 1423 0154 8930      		cpi r24,lo8(9)
 1424 0156 01F0      		breq .+2
 1425 0158 00C0      		rjmp .L88
 542:USBCore.c     **** 	{
 543:USBCore.c     **** 	  if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
 1426               		.stabn	68,0,543,.LM162-.LFBB13
 1427               	.LM162:
 1428 015a 9370      		andi r25,lo8(3)
 1429 015c 01F0      		breq .+2
 1430 015e 00C0      		rjmp .L96
 1431 0160 E0E0      		ldi r30,lo8(_initEndpoints+1)
 1432 0162 F0E0      		ldi r31,hi8(_initEndpoints+1)
 1433 0164 81E0      		ldi r24,lo8(1)
 1434               	.LBB229:
 1435               	.LBB230:
 347:USBCore.c     ****       UECFG0X = pgm_read_byte(_initEndpoints+i);
 1436               		.stabn	68,0,347,.LM163-.LFBB13
 1437               	.LM163:
 1438 0166 31E0      		ldi r19,lo8(1)
 349:USBCore.c     ****     }
 1439               		.stabn	68,0,349,.LM164-.LFBB13
 1440               	.LM164:
 1441 0168 96E3      		ldi r25,lo8(54)
 1442               	.L99:
 346:USBCore.c     ****       UECONX = 1;
 1443               		.stabn	68,0,346,.LM165-.LFBB13
 1444               	.LM165:
 1445 016a 8093 E900 		sts 233,r24
 347:USBCore.c     ****       UECFG0X = pgm_read_byte(_initEndpoints+i);
 1446               		.stabn	68,0,347,.LM166-.LFBB13
 1447               	.LM166:
 1448 016e 3093 EB00 		sts 235,r19
 1449               	.LBB231:
 348:USBCore.c     ****       UECFG1X = EP_DOUBLE_64;
 1450               		.stabn	68,0,348,.LM167-.LFBB13
 1451               	.LM167:
 1452               	/* #APP */
 1453               	 ;  348 "USBCore.c" 1
 1454 0172 2491      		lpm r18, Z
 1455               		
 1456               	 ;  0 "" 2
 1457               	/* #NOAPP */
 1458               	.LBE231:
 1459 0174 2093 EC00 		sts 236,r18
 349:USBCore.c     ****     }
 1460               		.stabn	68,0,349,.LM168-.LFBB13
 1461               	.LM168:
 1462 0178 9093 ED00 		sts 237,r25
 344:USBCore.c     ****     {
 1463               		.stabn	68,0,344,.LM169-.LFBB13
 1464               	.LM169:
 1465 017c 8F5F      		subi r24,lo8(-(1))
 1466 017e 3196      		adiw r30,1
 1467 0180 8430      		cpi r24,lo8(4)
 1468 0182 01F4      		brne .L99
GAS LISTING /tmp/cc8D9STo.s 			page 41


 351:USBCore.c     ****   UERST = 0;
 1469               		.stabn	68,0,351,.LM170-.LFBB13
 1470               	.LM170:
 1471 0184 8EE7      		ldi r24,lo8(126)
 1472 0186 8093 EA00 		sts 234,r24
 352:USBCore.c     **** }
 1473               		.stabn	68,0,352,.LM171-.LFBB13
 1474               	.LM171:
 1475 018a 1092 EA00 		sts 234,__zero_reg__
 1476               	.LBE230:
 1477               	.LBE229:
 544:USBCore.c     **** 	    {
 545:USBCore.c     **** 	      InitEndpoints();
 546:USBCore.c     **** 	      _usbConfiguration = setup.wValueL;
 1478               		.stabn	68,0,546,.LM172-.LFBB13
 1479               	.LM172:
 1480 018e 8C85      		ldd r24,Y+12
 1481 0190 8093 0000 		sts _usbConfiguration,r24
 1482 0194 00C0      		rjmp .L88
 1483               	.L86:
 1484               	.LBE214:
 547:USBCore.c     **** 	    } else
 548:USBCore.c     **** 	    ok = false;
 549:USBCore.c     **** 	}
 550:USBCore.c     ****       else if (GET_INTERFACE == r)
 551:USBCore.c     **** 	{
 552:USBCore.c     **** 	}
 553:USBCore.c     ****       else if (SET_INTERFACE == r)
 554:USBCore.c     **** 	{
 555:USBCore.c     **** 	}
 556:USBCore.c     ****     }
 557:USBCore.c     ****   else
 558:USBCore.c     ****     {
 559:USBCore.c     ****       InitControl(setup.wLength);		//	Max length of transfer
 1485               		.stabn	68,0,559,.LM173-.LFBB13
 1486               	.LM173:
 1487 0196 8889      		ldd r24,Y+16
 1488 0198 9989      		ldd r25,Y+17
 1489 019a 0E94 0000 		call InitControl
 1490               	.LBB233:
 1491               	.LBB234:
 361:USBCore.c     ****     return CDC_Setup(setup);
 1492               		.stabn	68,0,361,.LM174-.LFBB13
 1493               	.LM174:
 1494 019e 8E85      		ldd r24,Y+14
 1495 01a0 8111      		cpse r24,__zero_reg__
 1496 01a2 00C0      		rjmp .L96
 362:USBCore.c     **** #endif
 1497               		.stabn	68,0,362,.LM175-.LFBB13
 1498               	.LM175:
 1499 01a4 CE01      		movw r24,r28
 1500 01a6 0A96      		adiw r24,10
 1501 01a8 0E94 0000 		call CDC_Setup
 1502               	.LBE234:
 1503               	.LBE233:
 560:USBCore.c     ****       ok = ClassInterfaceRequest(& setup);
 561:USBCore.c     ****     }
GAS LISTING /tmp/cc8D9STo.s 			page 42


 562:USBCore.c     **** 
 563:USBCore.c     ****   if (ok)
 1504               		.stabn	68,0,563,.LM176-.LFBB13
 1505               	.LM176:
 1506 01ac 8823      		tst r24
 1507 01ae 01F0      		breq .L96
 1508 01b0 00C0      		rjmp .L88
 1509               	.L102:
 1510               	.LBB235:
 1511               	.LBB232:
 1512               	.LBB226:
 468:USBCore.c     ****     }
 1513               		.stabn	68,0,468,.LM177-.LFBB13
 1514               	.LM177:
 1515 01b2 60E0      		ldi r22,lo8(USB_DeviceDescriptorA)
 1516 01b4 70E0      		ldi r23,hi8(USB_DeviceDescriptorA)
 1517 01b6 00C0      		rjmp .L95
 1518               	.L103:
 473:USBCore.c     ****       else if (setup->wValueL == IPRODUCT) 
 1519               		.stabn	68,0,473,.LM178-.LFBB13
 1520               	.LM178:
 1521 01b8 60E0      		ldi r22,lo8(STRING_LANGUAGE)
 1522 01ba 70E0      		ldi r23,hi8(STRING_LANGUAGE)
 1523 01bc 00C0      		rjmp .L95
 1524               	.L104:
 475:USBCore.c     ****       else if (setup->wValueL == IMANUFACTURER)
 1525               		.stabn	68,0,475,.LM179-.LFBB13
 1526               	.LM179:
 1527 01be 60E0      		ldi r22,lo8(STRING_IPRODUCT)
 1528 01c0 70E0      		ldi r23,hi8(STRING_IPRODUCT)
 1529               	.L95:
 1530               	.LBB225:
 485:USBCore.c     **** 
 1531               		.stabn	68,0,485,.LM180-.LFBB13
 1532               	.LM180:
 1533 01c2 FB01      		movw r30,r22
 1534               	/* #APP */
 1535               	 ;  485 "USBCore.c" 1
 1536 01c4 4491      		lpm r20, Z
 1537               		
 1538               	 ;  0 "" 2
 1539               	/* #NOAPP */
 1540               	.LBE225:
 487:USBCore.c     ****   return true;
 1541               		.stabn	68,0,487,.LM181-.LFBB13
 1542               	.LM181:
 1543 01c6 50E0      		ldi r21,0
 1544 01c8 80E8      		ldi r24,lo8(-128)
 1545 01ca 0E94 0000 		call USB_SendControl
 1546               	.L88:
 1547               	.LBE226:
 1548               	.LBE232:
 1549               	.LBE235:
 1550               	.LBB236:
 1551               	.LBB237:
  92:USBCore.c     **** }
 1552               		.stabn	68,0,92,.LM182-.LFBB13
GAS LISTING /tmp/cc8D9STo.s 			page 43


 1553               	.LM182:
 1554 01ce 8EEF      		ldi r24,lo8(-2)
 1555 01d0 8093 E800 		sts 232,r24
 1556 01d4 00C0      		rjmp .L81
 1557               	.L96:
 1558               	.LBE237:
 1559               	.LBE236:
 1560               	.LBB238:
 1561               	.LBB239:
 155:USBCore.c     **** }
 1562               		.stabn	68,0,155,.LM183-.LFBB13
 1563               	.LM183:
 1564 01d6 81E2      		ldi r24,lo8(33)
 1565 01d8 8093 EB00 		sts 235,r24
 1566               	.L81:
 1567               	/* epilogue start */
 1568               	.LBE239:
 1569               	.LBE238:
 564:USBCore.c     ****     ClearIN();
 565:USBCore.c     ****   else
 566:USBCore.c     ****     {
 567:USBCore.c     ****       Stall();
 568:USBCore.c     ****     }
 569:USBCore.c     **** }
 1570               		.stabn	68,0,569,.LM184-.LFBB13
 1571               	.LM184:
 1572 01dc 6196      		adiw r28,17
 1573 01de 0FB6      		in __tmp_reg__,__SREG__
 1574 01e0 F894      		cli
 1575 01e2 DEBF      		out __SP_H__,r29
 1576 01e4 0FBE      		out __SREG__,__tmp_reg__
 1577 01e6 CDBF      		out __SP_L__,r28
 1578 01e8 DF91      		pop r29
 1579 01ea CF91      		pop r28
 1580 01ec FF91      		pop r31
 1581 01ee EF91      		pop r30
 1582 01f0 BF91      		pop r27
 1583 01f2 AF91      		pop r26
 1584 01f4 9F91      		pop r25
 1585 01f6 8F91      		pop r24
 1586 01f8 7F91      		pop r23
 1587 01fa 6F91      		pop r22
 1588 01fc 5F91      		pop r21
 1589 01fe 4F91      		pop r20
 1590 0200 3F91      		pop r19
 1591 0202 2F91      		pop r18
 1592 0204 1F91      		pop r17
 1593 0206 FF90      		pop r15
 1594 0208 EF90      		pop r14
 1595 020a 0F90      		pop r0
 1596 020c 0FBE      		out __SREG__,r0
 1597 020e 0F90      		pop r0
 1598 0210 1F90      		pop r1
 1599 0212 1895      		reti
 1600               		.size	__vector_11, .-__vector_11
 1601               		.stabs	"setup:(12,1)",128,0,498,10
 1602               		.stabs	"requestType:r(1,1)",64,0,502,25
GAS LISTING /tmp/cc8D9STo.s 			page 44


 1603               		.stabn	192,0,0,.LFBB13-.LFBB13
 1604               		.stabs	"r:r(1,1)",64,0,512,24
 1605               		.stabn	192,0,0,.LBB214-.LFBB13
 1606               		.stabs	"t:r(1,1)",64,0,452,17
 1607               		.stabs	"desc_addr:r(0,55)=*(0,56)=k(1,1)",64,0,463,22
 1608               		.stabn	192,0,0,.LBB222-.LFBB13
 1609               		.stabs	"config:(13,3)",128,0,438,1
 1610               		.stabn	192,0,0,.LBB224-.LFBB13
 1611               		.stabn	224,0,0,.LBE224-.LFBB13
 1612               		.stabn	224,0,0,.LBE222-.LFBB13
 1613               		.stabs	"t:r(1,1)",64,0,452,17
 1614               		.stabs	"desc_addr:r(0,55)",64,0,463,22
 1615               		.stabn	192,0,0,.LBB226-.LFBB13
 1616               		.stabn	224,0,0,.LBE226-.LFBB13
 1617               		.stabs	"i:r(1,1)",64,0,343,24
 1618               		.stabn	192,0,0,.LBB230-.LFBB13
 1619               		.stabn	224,0,0,.LBE230-.LFBB13
 1620               		.stabn	224,0,0,.LBE214-.LFBB13
 1621               		.stabs	"r:r(1,1)",64,0,512,24
 1622               		.stabn	192,0,0,.LBB235-.LFBB13
 1623               		.stabn	224,0,0,.LBE235-.LFBB13
 1624               		.stabn	224,0,0,.Lscope13-.LFBB13
 1625               	.Lscope13:
 1626               		.stabs	"",36,0,0,.Lscope13-.LFBB13
 1627               		.stabd	78,0,0
 1628               		.section	.text.USB_Flush,"ax",@progbits
 1629               		.stabs	"USB_Flush:F(0,49)",36,0,571,USB_Flush
 1630               		.stabs	"ep:P(1,1)",64,0,571,24
 1631               	.global	USB_Flush
 1632               		.type	USB_Flush, @function
 1633               	USB_Flush:
 1634               		.stabd	46,0,0
 570:USBCore.c     **** 
 571:USBCore.c     **** void USB_Flush(u8 ep)
 572:USBCore.c     **** {
 1635               		.stabn	68,0,572,.LM185-.LFBB14
 1636               	.LM185:
 1637               	.LFBB14:
 1638               	/* prologue: function */
 1639               	/* frame size = 0 */
 1640               	/* stack size = 0 */
 1641               	.L__stack_usage = 0
 1642               	.LBB240:
 1643               	.LBB241:
 135:USBCore.c     **** }
 1644               		.stabn	68,0,135,.LM186-.LFBB14
 1645               	.LM186:
 1646 0000 8093 E900 		sts 233,r24
 1647               	.LBE241:
 1648               	.LBE240:
 1649               	.LBB242:
 1650               	.LBB243:
 140:USBCore.c     **** }
 1651               		.stabn	68,0,140,.LM187-.LFBB14
 1652               	.LM187:
 1653 0004 8091 F200 		lds r24,242
 1654               	.LBE243:
GAS LISTING /tmp/cc8D9STo.s 			page 45


 1655               	.LBE242:
 573:USBCore.c     ****   SetEP(ep);
 574:USBCore.c     ****   if (FifoByteCount())
 1656               		.stabn	68,0,574,.LM188-.LFBB14
 1657               	.LM188:
 1658 0008 8823      		tst r24
 1659 000a 01F0      		breq .L121
 1660               	.LBB244:
 1661               	.LBB245:
 180:USBCore.c     **** }
 1662               		.stabn	68,0,180,.LM189-.LFBB14
 1663               	.LM189:
 1664 000c 8AE3      		ldi r24,lo8(58)
 1665 000e 8093 E800 		sts 232,r24
 1666               	.L121:
 1667 0012 0895      		ret
 1668               	.LBE245:
 1669               	.LBE244:
 1670               		.size	USB_Flush, .-USB_Flush
 1671               	.Lscope14:
 1672               		.stabs	"",36,0,0,.Lscope14-.LFBB14
 1673               		.stabd	78,0,0
 1674               		.section	.text.__vector_10,"ax",@progbits
 1675               		.stabs	"__vector_10:F(0,49)",36,0,579,__vector_10
 1676               	.global	__vector_10
 1677               		.type	__vector_10, @function
 1678               	__vector_10:
 1679               		.stabd	46,0,0
 575:USBCore.c     ****     ReleaseTX();
 576:USBCore.c     **** }
 577:USBCore.c     **** 
 578:USBCore.c     **** //	General interrupt
 579:USBCore.c     **** ISR(USB_GEN_vect)
 580:USBCore.c     **** {
 1680               		.stabn	68,0,580,.LM190-.LFBB15
 1681               	.LM190:
 1682               	.LFBB15:
 1683 0000 1F92      		push r1
 1684 0002 0F92      		push r0
 1685 0004 0FB6      		in r0,__SREG__
 1686 0006 0F92      		push r0
 1687 0008 1124      		clr __zero_reg__
 1688 000a 2F93      		push r18
 1689 000c 3F93      		push r19
 1690 000e 4F93      		push r20
 1691 0010 5F93      		push r21
 1692 0012 6F93      		push r22
 1693 0014 7F93      		push r23
 1694 0016 8F93      		push r24
 1695 0018 9F93      		push r25
 1696 001a AF93      		push r26
 1697 001c BF93      		push r27
 1698 001e EF93      		push r30
 1699 0020 FF93      		push r31
 1700               	/* prologue: Signal */
 1701               	/* frame size = 0 */
 1702               	/* stack size = 15 */
GAS LISTING /tmp/cc8D9STo.s 			page 46


 1703               	.L__stack_usage = 15
 581:USBCore.c     ****   u8 udint = UDINT;
 1704               		.stabn	68,0,581,.LM191-.LFBB15
 1705               	.LM191:
 1706 0022 8091 E100 		lds r24,225
 582:USBCore.c     ****   UDINT = 0;
 1707               		.stabn	68,0,582,.LM192-.LFBB15
 1708               	.LM192:
 1709 0026 1092 E100 		sts 225,__zero_reg__
 583:USBCore.c     **** 
 584:USBCore.c     ****   //	End of Reset
 585:USBCore.c     ****   if (udint & (1<<EORSTI))
 1710               		.stabn	68,0,585,.LM193-.LFBB15
 1711               	.LM193:
 1712 002a 83FF      		sbrs r24,3
 1713 002c 00C0      		rjmp .L127
 1714               	.LBB246:
 1715               	.LBB247:
 334:USBCore.c     ****   UECONX = 1;
 1716               		.stabn	68,0,334,.LM194-.LFBB15
 1717               	.LM194:
 1718 002e 1092 E900 		sts 233,__zero_reg__
 335:USBCore.c     ****   UECFG0X = type;
 1719               		.stabn	68,0,335,.LM195-.LFBB15
 1720               	.LM195:
 1721 0032 91E0      		ldi r25,lo8(1)
 1722 0034 9093 EB00 		sts 235,r25
 336:USBCore.c     ****   UECFG1X = size;
 1723               		.stabn	68,0,336,.LM196-.LFBB15
 1724               	.LM196:
 1725 0038 1092 EC00 		sts 236,__zero_reg__
 337:USBCore.c     **** }
 1726               		.stabn	68,0,337,.LM197-.LFBB15
 1727               	.LM197:
 1728 003c 92E3      		ldi r25,lo8(50)
 1729 003e 9093 ED00 		sts 237,r25
 1730               	.LBE247:
 1731               	.LBE246:
 586:USBCore.c     ****     {
 587:USBCore.c     ****       InitEP(0,EP_TYPE_CONTROL,EP_SINGLE_64);	// init ep0
 588:USBCore.c     ****       _usbConfiguration = 0;			// not configured yet
 1732               		.stabn	68,0,588,.LM198-.LFBB15
 1733               	.LM198:
 1734 0042 1092 0000 		sts _usbConfiguration,__zero_reg__
 589:USBCore.c     ****       UEIENX = 1 << RXSTPE;			// Enable interrupts for ep0
 1735               		.stabn	68,0,589,.LM199-.LFBB15
 1736               	.LM199:
 1737 0046 98E0      		ldi r25,lo8(8)
 1738 0048 9093 F000 		sts 240,r25
 1739               	.L127:
 590:USBCore.c     ****     }
 591:USBCore.c     **** 
 592:USBCore.c     ****   //	Start of Frame - happens every millisecond so we use it for TX and RX LED one-shot timing, too
 593:USBCore.c     ****   if (udint & (1<<SOFI))
 1740               		.stabn	68,0,593,.LM200-.LFBB15
 1741               	.LM200:
 1742 004c 82FF      		sbrs r24,2
GAS LISTING /tmp/cc8D9STo.s 			page 47


 1743 004e 00C0      		rjmp .L126
 594:USBCore.c     ****     {
 595:USBCore.c     **** #ifdef CDC_ENABLED
 596:USBCore.c     ****       USB_Flush(CDC_TX);				// Send a tx frame if found
 1744               		.stabn	68,0,596,.LM201-.LFBB15
 1745               	.LM201:
 1746 0050 83E0      		ldi r24,lo8(3)
 1747 0052 0E94 0000 		call USB_Flush
 1748               	.L130:
 1749               	.LBB248:
 1750               	.LBB249:
 215:USBCore.c     ****   return FifoByteCount();
 1751               		.stabn	68,0,215,.LM202-.LFBB15
 1752               	.LM202:
 1753 0056 82E0      		ldi r24,lo8(2)
 1754 0058 0E94 0000 		call LockEP
 1755               	.LBB250:
 1756               	.LBB251:
 140:USBCore.c     **** }
 1757               		.stabn	68,0,140,.LM203-.LFBB15
 1758               	.LM203:
 1759 005c 8091 F200 		lds r24,242
 1760               	.LBE251:
 1761               	.LBE250:
 1762               	.LBE249:
 1763               	.LBE248:
 597:USBCore.c     ****       while (USB_Available(CDC_RX))	// Handle received bytes (if any)
 1764               		.stabn	68,0,597,.LM204-.LFBB15
 1765               	.LM204:
 1766 0060 8823      		tst r24
 1767 0062 01F0      		breq .L142
 598:USBCore.c     **** 	Serial_accept();
 1768               		.stabn	68,0,598,.LM205-.LFBB15
 1769               	.LM205:
 1770 0064 0E94 0000 		call Serial_accept
 1771 0068 00C0      		rjmp .L130
 1772               	.L142:
 599:USBCore.c     **** #endif
 600:USBCore.c     **** 		
 601:USBCore.c     ****       // check whether the one-shot period has elapsed.  if so, turn off the LED
 602:USBCore.c     ****       if (TxLEDPulse && !(--TxLEDPulse))
 1773               		.stabn	68,0,602,.LM206-.LFBB15
 1774               	.LM206:
 1775 006a 8091 0000 		lds r24,TxLEDPulse
 1776 006e 8823      		tst r24
 1777 0070 01F0      		breq .L133
 1778               		.stabn	68,0,602,.LM207-.LFBB15
 1779               	.LM207:
 1780 0072 8091 0000 		lds r24,TxLEDPulse
 1781 0076 8150      		subi r24,lo8(-(-1))
 1782 0078 8093 0000 		sts TxLEDPulse,r24
 1783 007c 8111      		cpse r24,__zero_reg__
 1784 007e 00C0      		rjmp .L133
 603:USBCore.c     **** 	TXLED0;
 1785               		.stabn	68,0,603,.LM208-.LFBB15
 1786               	.LM208:
 1787 0080 5D9A      		sbi 0xb,5
GAS LISTING /tmp/cc8D9STo.s 			page 48


 1788               	.L133:
 604:USBCore.c     ****       if (RxLEDPulse && !(--RxLEDPulse))
 1789               		.stabn	68,0,604,.LM209-.LFBB15
 1790               	.LM209:
 1791 0082 8091 0000 		lds r24,RxLEDPulse
 1792 0086 8823      		tst r24
 1793 0088 01F0      		breq .L126
 1794               		.stabn	68,0,604,.LM210-.LFBB15
 1795               	.LM210:
 1796 008a 8091 0000 		lds r24,RxLEDPulse
 1797 008e 8150      		subi r24,lo8(-(-1))
 1798 0090 8093 0000 		sts RxLEDPulse,r24
 1799 0094 8111      		cpse r24,__zero_reg__
 1800 0096 00C0      		rjmp .L126
 605:USBCore.c     **** 	RXLED0;
 1801               		.stabn	68,0,605,.LM211-.LFBB15
 1802               	.LM211:
 1803 0098 289A      		sbi 0x5,0
 1804               	.L126:
 1805               	/* epilogue start */
 606:USBCore.c     ****     }
 607:USBCore.c     **** }
 1806               		.stabn	68,0,607,.LM212-.LFBB15
 1807               	.LM212:
 1808 009a FF91      		pop r31
 1809 009c EF91      		pop r30
 1810 009e BF91      		pop r27
 1811 00a0 AF91      		pop r26
 1812 00a2 9F91      		pop r25
 1813 00a4 8F91      		pop r24
 1814 00a6 7F91      		pop r23
 1815 00a8 6F91      		pop r22
 1816 00aa 5F91      		pop r21
 1817 00ac 4F91      		pop r20
 1818 00ae 3F91      		pop r19
 1819 00b0 2F91      		pop r18
 1820 00b2 0F90      		pop r0
 1821 00b4 0FBE      		out __SREG__,r0
 1822 00b6 0F90      		pop r0
 1823 00b8 1F90      		pop r1
 1824 00ba 1895      		reti
 1825               		.size	__vector_10, .-__vector_10
 1826               		.stabs	"udint:r(1,1)",64,0,581,24
 1827               		.stabn	192,0,0,.LFBB15-.LFBB15
 1828               		.stabn	224,0,0,.Lscope15-.LFBB15
 1829               	.Lscope15:
 1830               		.stabs	"",36,0,0,.Lscope15-.LFBB15
 1831               		.stabd	78,0,0
 1832               		.section	.text.USBConnected,"ax",@progbits
 1833               		.stabs	"USBConnected:F(1,1)",36,0,611,USBConnected
 1834               	.global	USBConnected
 1835               		.type	USBConnected, @function
 1836               	USBConnected:
 1837               		.stabd	46,0,0
 608:USBCore.c     **** 
 609:USBCore.c     **** //	VBUS or counting frames
 610:USBCore.c     **** //	Any frame counting?
GAS LISTING /tmp/cc8D9STo.s 			page 49


 611:USBCore.c     **** u8 USBConnected()
 612:USBCore.c     **** {
 1838               		.stabn	68,0,612,.LM213-.LFBB16
 1839               	.LM213:
 1840               	.LFBB16:
 1841               	/* prologue: function */
 1842               	/* frame size = 0 */
 1843               	/* stack size = 0 */
 1844               	.L__stack_usage = 0
 613:USBCore.c     ****   u8 f = UDFNUML;
 1845               		.stabn	68,0,613,.LM214-.LFBB16
 1846               	.LM214:
 1847 0000 2091 E400 		lds r18,228
 1848               	.LBB252:
 1849               	.LBB253:
 1850               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext3
 1851               	.Ltext3:
 1852               		.stabn	68,0,187,.LM215-.LFBB16
 1853               	.LM215:
 1854 0004 8FED      		ldi r24,lo8(11999)
 1855 0006 9EE2      		ldi r25,hi8(11999)
 1856 0008 0197      	1:	sbiw r24,1
 1857 000a 01F4      		brne 1b
 1858 000c 00C0      		rjmp .
 1859 000e 0000      		nop
 1860               	.LBE253:
 1861               	.LBE252:
 1862               		.stabs	"USBCore.c",132,0,0,.Ltext4
 1863               	.Ltext4:
 614:USBCore.c     ****   delay(3);
 615:USBCore.c     ****   return f != UDFNUML;
 1864               		.stabn	68,0,615,.LM216-.LFBB16
 1865               	.LM216:
 1866 0010 9091 E400 		lds r25,228
 1867 0014 81E0      		ldi r24,lo8(1)
 1868 0016 2913      		cpse r18,r25
 1869 0018 00C0      		rjmp .L144
 1870 001a 80E0      		ldi r24,0
 1871               	.L144:
 616:USBCore.c     **** }
 1872               		.stabn	68,0,616,.LM217-.LFBB16
 1873               	.LM217:
 1874 001c 0895      		ret
 1875               		.size	USBConnected, .-USBConnected
 1876               		.stabs	"f:r(1,1)",64,0,613,18
 1877               		.stabn	192,0,0,.LFBB16-.LFBB16
 1878               		.stabn	224,0,0,.Lscope16-.LFBB16
 1879               	.Lscope16:
 1880               		.stabs	"",36,0,0,.Lscope16-.LFBB16
 1881               		.stabd	78,0,0
 1882               		.section	.text.USBDevice_attach,"ax",@progbits
 1883               		.stabs	"USBDevice_attach:F(0,49)",36,0,621,USBDevice_attach
 1884               	.global	USBDevice_attach
 1885               		.type	USBDevice_attach, @function
 1886               	USBDevice_attach:
 1887               		.stabd	46,0,0
 617:USBCore.c     **** 
GAS LISTING /tmp/cc8D9STo.s 			page 50


 618:USBCore.c     **** //=======================================================================
 619:USBCore.c     **** //=======================================================================
 620:USBCore.c     **** 
 621:USBCore.c     **** void USBDevice_attach()
 622:USBCore.c     **** {
 1888               		.stabn	68,0,622,.LM218-.LFBB17
 1889               	.LM218:
 1890               	.LFBB17:
 1891               	/* prologue: function */
 1892               	/* frame size = 0 */
 1893               	/* stack size = 0 */
 1894               	.L__stack_usage = 0
 623:USBCore.c     ****   _usbConfiguration = 0;
 1895               		.stabn	68,0,623,.LM219-.LFBB17
 1896               	.LM219:
 1897 0000 1092 0000 		sts _usbConfiguration,__zero_reg__
 624:USBCore.c     ****   UHWCON = 0x01;						// power internal reg
 1898               		.stabn	68,0,624,.LM220-.LFBB17
 1899               	.LM220:
 1900 0004 81E0      		ldi r24,lo8(1)
 1901 0006 8093 D700 		sts 215,r24
 625:USBCore.c     ****   USBCON = (1<<USBE)|(1<<FRZCLK);		// clock frozen, usb enabled
 1902               		.stabn	68,0,625,.LM221-.LFBB17
 1903               	.LM221:
 1904 000a 80EA      		ldi r24,lo8(-96)
 1905 000c 8093 D800 		sts 216,r24
 626:USBCore.c     ****   PLLCSR = 0x12;						// Need 16 MHz xtal
 1906               		.stabn	68,0,626,.LM222-.LFBB17
 1907               	.LM222:
 1908 0010 82E1      		ldi r24,lo8(18)
 1909 0012 89BD      		out 0x29,r24
 1910               	.L146:
 627:USBCore.c     ****   while (!(PLLCSR & (1<<PLOCK)))		// wait for lock pll
 1911               		.stabn	68,0,627,.LM223-.LFBB17
 1912               	.LM223:
 1913 0014 09B4      		in __tmp_reg__,0x29
 1914 0016 00FE      		sbrs __tmp_reg__,0
 1915 0018 00C0      		rjmp .L146
 1916               	.LBB254:
 1917               	.LBB255:
 1918               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext5
 1919               	.Ltext5:
 1920               		.stabn	68,0,187,.LM224-.LFBB17
 1921               	.LM224:
 1922 001a 8FE9      		ldi r24,lo8(3999)
 1923 001c 9FE0      		ldi r25,hi8(3999)
 1924 001e 0197      	1:	sbiw r24,1
 1925 0020 01F4      		brne 1b
 1926 0022 00C0      		rjmp .
 1927 0024 0000      		nop
 1928               	.LBE255:
 1929               	.LBE254:
 1930               		.stabs	"USBCore.c",132,0,0,.Ltext6
 1931               	.Ltext6:
 628:USBCore.c     ****     ;
 629:USBCore.c     **** 
 630:USBCore.c     ****   // Some tests on specific versions of macosx (10.7.3), reported some
GAS LISTING /tmp/cc8D9STo.s 			page 51


 631:USBCore.c     ****   // strange behaviuors when the board is reset using the serial
 632:USBCore.c     ****   // port touch at 1200 bps. This delay fixes this behaviour.
 633:USBCore.c     ****   delay(1);
 634:USBCore.c     **** 
 635:USBCore.c     ****   USBCON = ((1<<USBE)|(1<<OTGPADE));	// start USB clock
 1932               		.stabn	68,0,635,.LM225-.LFBB17
 1933               	.LM225:
 1934 0026 80E9      		ldi r24,lo8(-112)
 1935 0028 8093 D800 		sts 216,r24
 636:USBCore.c     ****   UDIEN = (1<<EORSTE)|(1<<SOFE);		// Enable interrupts for EOR (End of Reset) and SOF (start of fra
 1936               		.stabn	68,0,636,.LM226-.LFBB17
 1937               	.LM226:
 1938 002c 8CE0      		ldi r24,lo8(12)
 1939 002e 8093 E200 		sts 226,r24
 637:USBCore.c     ****   UDCON = 0;							// enable attach resistor
 1940               		.stabn	68,0,637,.LM227-.LFBB17
 1941               	.LM227:
 1942 0032 1092 E000 		sts 224,__zero_reg__
 638:USBCore.c     **** 	
 639:USBCore.c     ****   TX_RX_LED_INIT;
 1943               		.stabn	68,0,639,.LM228-.LFBB17
 1944               	.LM228:
 1945 0036 559A      		sbi 0xa,5
 1946 0038 209A      		sbi 0x4,0
 1947 003a 0895      		ret
 1948               		.size	USBDevice_attach, .-USBDevice_attach
 1949               	.Lscope17:
 1950               		.stabs	"",36,0,0,.Lscope17-.LFBB17
 1951               		.stabd	78,0,0
 1952               		.section	.text.USBDevice_configured,"ax",@progbits
 1953               		.stabs	"USBDevice_configured:F(1,1)",36,0,644,USBDevice_configured
 1954               	.global	USBDevice_configured
 1955               		.type	USBDevice_configured, @function
 1956               	USBDevice_configured:
 1957               		.stabd	46,0,0
 640:USBCore.c     **** }
 641:USBCore.c     **** 
 642:USBCore.c     **** //	Check for interrupts
 643:USBCore.c     **** //	TODO: VBUS detection
 644:USBCore.c     **** bool USBDevice_configured()
 645:USBCore.c     **** {
 1958               		.stabn	68,0,645,.LM229-.LFBB18
 1959               	.LM229:
 1960               	.LFBB18:
 1961               	/* prologue: function */
 1962               	/* frame size = 0 */
 1963               	/* stack size = 0 */
 1964               	.L__stack_usage = 0
 646:USBCore.c     ****   return _usbConfiguration;
 1965               		.stabn	68,0,646,.LM230-.LFBB18
 1966               	.LM230:
 1967 0000 8091 0000 		lds r24,_usbConfiguration
 647:USBCore.c     **** }
 1968               		.stabn	68,0,647,.LM231-.LFBB18
 1969               	.LM231:
 1970 0004 0895      		ret
 1971               		.size	USBDevice_configured, .-USBDevice_configured
GAS LISTING /tmp/cc8D9STo.s 			page 52


 1972               	.Lscope18:
 1973               		.stabs	"",36,0,0,.Lscope18-.LFBB18
 1974               		.stabd	78,0,0
 1975               	.global	_cdcComposite
 1976               		.section	.bss._cdcComposite,"aw",@nobits
 1977               		.type	_cdcComposite, @object
 1978               		.size	_cdcComposite, 1
 1979               	_cdcComposite:
 1980 0000 00        		.zero	1
 1981               		.comm	_cend,2,1
 1982               		.comm	_cmark,2,1
 1983               	.global	_initEndpoints
 1984               		.section	.progmem.data._initEndpoints,"a",@progbits
 1985               		.type	_initEndpoints, @object
 1986               		.size	_initEndpoints, 4
 1987               	_initEndpoints:
 1988 0000 00        		.byte	0
 1989 0001 C1        		.byte	-63
 1990 0002 80        		.byte	-128
 1991 0003 81        		.byte	-127
 1992               		.section	.bss._sreg,"aw",@nobits
 1993               		.type	_sreg, @object
 1994               		.size	_sreg, 1
 1995               	_sreg:
 1996 0000 00        		.zero	1
 1997               	.global	_usbConfiguration
 1998               		.section	.bss._usbConfiguration,"aw",@nobits
 1999               		.type	_usbConfiguration, @object
 2000               		.size	_usbConfiguration, 1
 2001               	_usbConfiguration:
 2002 0000 00        		.zero	1
 2003               	.global	USB_DeviceDescriptorA
 2004               		.section	.progmem.data.USB_DeviceDescriptorA,"a",@progbits
 2005               		.type	USB_DeviceDescriptorA, @object
 2006               		.size	USB_DeviceDescriptorA, 18
 2007               	USB_DeviceDescriptorA:
 2008 0000 12        		.byte	18
 2009 0001 01        		.byte	1
 2010 0002 0002      		.word	512
 2011 0004 02        		.byte	2
 2012 0005 00        		.byte	0
 2013 0006 00        		.byte	0
 2014 0007 40        		.byte	64
 2015 0008 4123      		.word	9025
 2016 000a 3680      		.word	-32714
 2017 000c 0001      		.word	256
 2018 000e 01        		.byte	1
 2019 000f 02        		.byte	2
 2020 0010 00        		.byte	0
 2021 0011 01        		.byte	1
 2022               	.global	USB_DeviceDescriptor
 2023               		.section	.progmem.data.USB_DeviceDescriptor,"a",@progbits
 2024               		.type	USB_DeviceDescriptor, @object
 2025               		.size	USB_DeviceDescriptor, 18
 2026               	USB_DeviceDescriptor:
 2027 0000 12        		.byte	18
 2028 0001 01        		.byte	1
GAS LISTING /tmp/cc8D9STo.s 			page 53


 2029 0002 0002      		.word	512
 2030 0004 00        		.byte	0
 2031 0005 00        		.byte	0
 2032 0006 00        		.byte	0
 2033 0007 40        		.byte	64
 2034 0008 4123      		.word	9025
 2035 000a 3680      		.word	-32714
 2036 000c 0001      		.word	256
 2037 000e 01        		.byte	1
 2038 000f 02        		.byte	2
 2039 0010 00        		.byte	0
 2040 0011 01        		.byte	1
 2041               	.global	STRING_IMANUFACTURER
 2042               		.section	.progmem.data.STRING_IMANUFACTURER,"a",@progbits
 2043               		.type	STRING_IMANUFACTURER, @object
 2044               		.size	STRING_IMANUFACTURER, 24
 2045               	STRING_IMANUFACTURER:
 2046 0000 1803      		.word	792
 2047 0002 4C00      		.word	76
 2048 0004 4500      		.word	69
 2049 0006 4500      		.word	69
 2050 0008 4100      		.word	65
 2051 000a 2000      		.word	32
 2052 000c 2000      		.word	32
 2053 000e 5500      		.word	85
 2054 0010 4600      		.word	70
 2055 0012 5200      		.word	82
 2056 0014 5300      		.word	83
 2057 0016 5400      		.word	84
 2058               	.global	STRING_IPRODUCT
 2059               		.section	.progmem.data.STRING_IPRODUCT,"a",@progbits
 2060               		.type	STRING_IPRODUCT, @object
 2061               		.size	STRING_IPRODUCT, 34
 2062               	STRING_IPRODUCT:
 2063 0000 2203      		.word	802
 2064 0002 4C00      		.word	76
 2065 0004 4500      		.word	69
 2066 0006 4500      		.word	69
 2067 0008 4100      		.word	65
 2068 000a 6900      		.word	105
 2069 000c 6E00      		.word	110
 2070 000e 6F00      		.word	111
 2071 0010 2000      		.word	32
 2072 0012 4C00      		.word	76
 2073 0014 6500      		.word	101
 2074 0016 6F00      		.word	111
 2075 0018 6E00      		.word	110
 2076 001a 6100      		.word	97
 2077 001c 7200      		.word	114
 2078 001e 6400      		.word	100
 2079 0020 6F00      		.word	111
 2080               	.global	STRING_LANGUAGE
 2081               		.section	.progmem.data.STRING_LANGUAGE,"a",@progbits
 2082               		.type	STRING_LANGUAGE, @object
 2083               		.size	STRING_LANGUAGE, 4
 2084               	STRING_LANGUAGE:
 2085 0000 0403      		.word	772
GAS LISTING /tmp/cc8D9STo.s 			page 54


 2086 0002 0904      		.word	1033
 2087               		.comm	RxLEDPulse,1,1
 2088               		.comm	TxLEDPulse,1,1
 2089               		.stabs	"SDA:c=i2",128,0,0,0
 2090               		.stabs	"SCL:c=i3",128,0,0,0
 2091               		.stabs	"SS:c=i17",128,0,0,0
 2092               		.stabs	"MOSI:c=i16",128,0,0,0
 2093               		.stabs	"MISO:c=i14",128,0,0,0
 2094               		.stabs	"SCK:c=i15",128,0,0,0
 2095               		.stabs	"A0:c=i18",128,0,0,0
 2096               		.stabs	"A1:c=i19",128,0,0,0
 2097               		.stabs	"A2:c=i20",128,0,0,0
 2098               		.stabs	"A3:c=i21",128,0,0,0
 2099               		.stabs	"A4:c=i22",128,0,0,0
 2100               		.stabs	"A5:c=i23",128,0,0,0
 2101               		.stabs	"A6:c=i24",128,0,0,0
 2102               		.stabs	"A7:c=i25",128,0,0,0
 2103               		.stabs	"A8:c=i26",128,0,0,0
 2104               		.stabs	"A9:c=i27",128,0,0,0
 2105               		.stabs	"A10:c=i28",128,0,0,0
 2106               		.stabs	"A11:c=i29",128,0,0,0
 2107               		.stabs	"_sreg:S(1,1)",40,0,199,_sreg
 2108               		.stabs	"TxLEDPulse:G(0,51)",32,0,32,0
 2109               		.stabs	"RxLEDPulse:G(0,51)",32,0,33,0
 2110               		.stabs	"STRING_LANGUAGE:G(0,57)=ar(0,58)=r(0,58);0;0177777;;0;1;(0,59)=k(1,2)",32,0,44,0
 2111               		.stabs	"STRING_IPRODUCT:G(0,60)=ar(0,58);0;16;(0,59)",32,0,49,0
 2112               		.stabs	"STRING_IMANUFACTURER:G(0,61)=ar(0,58);0;11;(0,59)",32,0,58,0
 2113               		.stabs	"USB_DeviceDescriptor:G(0,62)=k(13,1)",32,0,74,0
 2114               		.stabs	"USB_DeviceDescriptorA:G(0,62)",32,0,77,0
 2115               		.stabs	"_usbConfiguration:G(0,51)",32,0,83,0
 2116               		.stabs	"_initEndpoints:G(0,63)=ar(0,58);0;3;(0,56)",32,0,313,0
 2117               		.stabs	"_cmark:G(0,1)",32,0,372,0
 2118               		.stabs	"_cend:G(0,1)",32,0,373,0
 2119               		.stabs	"_cdcComposite:G(1,1)",32,0,447,0
 2120               		.weak	CDC_Setup
 2121               		.weak	CDC_GetInterface
 2122               		.text
 2123               		.stabs	"",100,0,0,.Letext0
 2124               	.Letext0:
 2125               		.ident	"GCC: (GNU) 5.4.0"
 2126               	.global __do_clear_bss
GAS LISTING /tmp/cc8D9STo.s 			page 55


DEFINED SYMBOLS
                            *ABS*:0000000000000000 USBCore.c
     /tmp/cc8D9STo.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc8D9STo.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc8D9STo.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc8D9STo.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc8D9STo.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc8D9STo.s:151    .text.Recv:0000000000000000 Recv
                            *COM*:0000000000000001 RxLEDPulse
     /tmp/cc8D9STo.s:188    .text.USBGetConfiguration:0000000000000000 USBGetConfiguration
     /tmp/cc8D9STo.s:2001   .bss._usbConfiguration:0000000000000000 _usbConfiguration
     /tmp/cc8D9STo.s:201    .text.LockEP:0000000000000000 LockEP
     /tmp/cc8D9STo.s:1995   .bss._sreg:0000000000000000 _sreg
     /tmp/cc8D9STo.s:240    .text.unLockEP:0000000000000000 unLockEP
     /tmp/cc8D9STo.s:263    .text.USB_Available:0000000000000000 USB_Available
     /tmp/cc8D9STo.s:295    .text.USB_Recv:0000000000000000 USB_Recv
     /tmp/cc8D9STo.s:434    .text.USB_RecvNB:0000000000000000 USB_RecvNB
     /tmp/cc8D9STo.s:488    .text.USB_SendSpace:0000000000000000 USB_SendSpace
     /tmp/cc8D9STo.s:556    .text.USB_Send:0000000000000000 USB_Send
                            *COM*:0000000000000001 TxLEDPulse
     /tmp/cc8D9STo.s:827    .text.InitControl:0000000000000000 InitControl
                            *COM*:0000000000000002 _cmark
                            *COM*:0000000000000002 _cend
     /tmp/cc8D9STo.s:863    .text.USB_SendControl:0000000000000000 USB_SendControl
     /tmp/cc8D9STo.s:1036   .text.USB_RecvControl:0000000000000000 USB_RecvControl
     /tmp/cc8D9STo.s:1085   .text.SendInterfaces:0000000000000000 SendInterfaces
     /tmp/cc8D9STo.s:1129   .text.__vector_11:0000000000000000 __vector_11
     /tmp/cc8D9STo.s:1979   .bss._cdcComposite:0000000000000000 _cdcComposite
     /tmp/cc8D9STo.s:2026   .progmem.data.USB_DeviceDescriptor:0000000000000000 USB_DeviceDescriptor
     /tmp/cc8D9STo.s:2045   .progmem.data.STRING_IMANUFACTURER:0000000000000000 STRING_IMANUFACTURER
     /tmp/cc8D9STo.s:1987   .progmem.data._initEndpoints:0000000000000000 _initEndpoints
     /tmp/cc8D9STo.s:2007   .progmem.data.USB_DeviceDescriptorA:0000000000000000 USB_DeviceDescriptorA
     /tmp/cc8D9STo.s:2084   .progmem.data.STRING_LANGUAGE:0000000000000000 STRING_LANGUAGE
     /tmp/cc8D9STo.s:2062   .progmem.data.STRING_IPRODUCT:0000000000000000 STRING_IPRODUCT
     /tmp/cc8D9STo.s:1633   .text.USB_Flush:0000000000000000 USB_Flush
     /tmp/cc8D9STo.s:1678   .text.__vector_10:0000000000000000 __vector_10
     /tmp/cc8D9STo.s:1836   .text.USBConnected:0000000000000000 USBConnected
     /tmp/cc8D9STo.s:1886   .text.USBDevice_attach:0000000000000000 USBDevice_attach
     /tmp/cc8D9STo.s:1956   .text.USBDevice_configured:0000000000000000 USBDevice_configured

UNDEFINED SYMBOLS
CDC_GetInterface
CDC_Setup
Serial_accept
__do_clear_bss
