GAS LISTING /tmp/ccGxrOnp.s 			page 1


   1               		.file	"libi2c.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/tmp/L3/src/",100,0,2,.Ltext0
   8               		.stabs	"libi2c.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=r(0,2);0;127;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"__int128:t(0,6)=@s128;r(0,6);02000000000000000000000000000000000000000000;0177777777777777
  18               		.stabs	"__int128 unsigned:t(0,7)=@s128;r(0,7);0;03777777777777777777777777777777777777777777;",128
  19               		.stabs	"long long int:t(0,8)=@s64;r(0,8);01000000000000000000000;00777777777777777777777;",128,0,0
  20               		.stabs	"long long unsigned int:t(0,9)=@s64;r(0,9);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,10)=r(0,10);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,11)=r(0,11);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,12)=@s8;r(0,12);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,15)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,16)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"short _Fract:t(0,17)=r(0,1);1;0;",128,0,0,0
  29               		.stabs	"_Fract:t(0,18)=r(0,1);2;0;",128,0,0,0
  30               		.stabs	"long _Fract:t(0,19)=r(0,1);4;0;",128,0,0,0
  31               		.stabs	"long long _Fract:t(0,20)=r(0,1);8;0;",128,0,0,0
  32               		.stabs	"unsigned short _Fract:t(0,21)=r(0,1);1;0;",128,0,0,0
  33               		.stabs	"unsigned _Fract:t(0,22)=r(0,1);2;0;",128,0,0,0
  34               		.stabs	"unsigned long _Fract:t(0,23)=r(0,1);4;0;",128,0,0,0
  35               		.stabs	"unsigned long long _Fract:t(0,24)=r(0,1);8;0;",128,0,0,0
  36               		.stabs	"_Sat short _Fract:t(0,25)=r(0,1);1;0;",128,0,0,0
  37               		.stabs	"_Sat _Fract:t(0,26)=r(0,1);2;0;",128,0,0,0
  38               		.stabs	"_Sat long _Fract:t(0,27)=r(0,1);4;0;",128,0,0,0
  39               		.stabs	"_Sat long long _Fract:t(0,28)=r(0,1);8;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned short _Fract:t(0,29)=r(0,1);1;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned _Fract:t(0,30)=r(0,1);2;0;",128,0,0,0
  42               		.stabs	"_Sat unsigned long _Fract:t(0,31)=r(0,1);4;0;",128,0,0,0
  43               		.stabs	"_Sat unsigned long long _Fract:t(0,32)=r(0,1);8;0;",128,0,0,0
  44               		.stabs	"short _Accum:t(0,33)=r(0,1);2;0;",128,0,0,0
  45               		.stabs	"_Accum:t(0,34)=r(0,1);4;0;",128,0,0,0
  46               		.stabs	"long _Accum:t(0,35)=r(0,1);8;0;",128,0,0,0
  47               		.stabs	"long long _Accum:t(0,36)=r(0,1);8;0;",128,0,0,0
  48               		.stabs	"unsigned short _Accum:t(0,37)=r(0,1);2;0;",128,0,0,0
  49               		.stabs	"unsigned _Accum:t(0,38)=r(0,1);4;0;",128,0,0,0
  50               		.stabs	"unsigned long _Accum:t(0,39)=r(0,1);8;0;",128,0,0,0
  51               		.stabs	"unsigned long long _Accum:t(0,40)=r(0,1);8;0;",128,0,0,0
  52               		.stabs	"_Sat short _Accum:t(0,41)=r(0,1);2;0;",128,0,0,0
  53               		.stabs	"_Sat _Accum:t(0,42)=r(0,1);4;0;",128,0,0,0
  54               		.stabs	"_Sat long _Accum:t(0,43)=r(0,1);8;0;",128,0,0,0
  55               		.stabs	"_Sat long long _Accum:t(0,44)=r(0,1);8;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned short _Accum:t(0,45)=r(0,1);2;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned _Accum:t(0,46)=r(0,1);4;0;",128,0,0,0
GAS LISTING /tmp/ccGxrOnp.s 			page 2


  58               		.stabs	"_Sat unsigned long _Accum:t(0,47)=r(0,1);8;0;",128,0,0,0
  59               		.stabs	"_Sat unsigned long long _Accum:t(0,48)=r(0,1);8;0;",128,0,0,0
  60               		.stabs	"void:t(0,49)=(0,49)",128,0,0,0
  61               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  62               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  64               		.stabs	"/usr/lib/gcc/avr/5.4.0/include/stdint.h",130,0,0,0
  65               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  66               		.stabs	"int8_t:t(5,1)=(0,12)",128,0,125,0
  67               		.stabs	"uint8_t:t(5,2)=(0,13)",128,0,126,0
  68               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,127,0
  69               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,128,0
  70               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,129,0
  71               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,130,0
  72               		.stabs	"int64_t:t(5,7)=(0,8)",128,0,132,0
  73               		.stabs	"uint64_t:t(5,8)=(0,9)",128,0,133,0
  74               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,146,0
  75               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,151,0
  76               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,163,0
  77               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,168,0
  78               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,173,0
  79               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,178,0
  80               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,183,0
  81               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,188,0
  82               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,196,0
  83               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,203,0
  84               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,217,0
  85               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,222,0
  86               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,227,0
  87               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,232,0
  88               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,237,0
  89               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,242,0
  90               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,250,0
  91               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,257,0
  92               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,277,0
  93               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,282,0
  94               		.stabn	162,0,0,0
  95               		.stabn	162,0,0,0
  96               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  97               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  98               		.stabn	162,0,0,0
  99               		.stabn	162,0,0,0
 100               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
 101               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,244,0
 102               		.stabn	162,0,0,0
 103               		.stabn	162,0,0,0
 104               		.stabs	"../include/libttycom.h",130,0,0,0
 105               		.stabs	"u8:t(7,1)=(0,13)",128,0,9,0
 106               		.stabs	"MODE:T(7,2)=eRX:1,TX:2,RXTX:3,;",128,0,0,0
 107               		.stabn	162,0,0,0
 108               		.section	.text.I2C_UEXT,"ax",@progbits
 109               		.stabs	"I2C_UEXT:F(0,49)",36,0,15,I2C_UEXT
 110               		.stabs	"on:P(5,2)",64,0,15,24
 111               	.global	I2C_UEXT
 112               		.type	I2C_UEXT, @function
 113               	I2C_UEXT:
 114               		.stabd	46,0,0
GAS LISTING /tmp/ccGxrOnp.s 			page 3


   1:libi2c.c      **** /*
   2:libi2c.c      ****  * corps de la biblioth√®que I2C
   3:libi2c.c      **** */
   4:libi2c.c      **** /******************************************************************************/
   5:libi2c.c      **** #include <avr/io.h>
   6:libi2c.c      **** #include "libi2c.h"
   7:libi2c.c      **** #include "libttycom.h"
   8:libi2c.c      **** 
   9:libi2c.c      **** // UEXT_PWR_E PB4
  10:libi2c.c      **** 
  11:libi2c.c      **** #ifdef DEBUG
  12:libi2c.c      **** char debug[80]="";
  13:libi2c.c      **** #endif
  14:libi2c.c      **** 
  15:libi2c.c      **** void I2C_UEXT(uint8_t on){
 115               		.stabn	68,0,15,.LM0-.LFBB1
 116               	.LM0:
 117               	.LFBB1:
 118               	/* prologue: function */
 119               	/* frame size = 0 */
 120               	/* stack size = 0 */
 121               	.L__stack_usage = 0
  16:libi2c.c      ****   DDRB|=1<<PB4;
 122               		.stabn	68,0,16,.LM1-.LFBB1
 123               	.LM1:
 124 0000 249A      		sbi 0x4,4
  17:libi2c.c      ****   if(on)
 125               		.stabn	68,0,17,.LM2-.LFBB1
 126               	.LM2:
 127 0002 8823      		tst r24
 128 0004 01F0      		breq .L2
  18:libi2c.c      ****     PORTB&=~1<<PB4;
 129               		.stabn	68,0,18,.LM3-.LFBB1
 130               	.LM3:
 131 0006 85B1      		in r24,0x5
 132 0008 807E      		andi r24,lo8(-32)
 133 000a 85B9      		out 0x5,r24
 134 000c 0895      		ret
 135               	.L2:
  19:libi2c.c      ****   else
  20:libi2c.c      ****     PORTB|=1<<PB4;
 136               		.stabn	68,0,20,.LM4-.LFBB1
 137               	.LM4:
 138 000e 2C9A      		sbi 0x5,4
 139 0010 0895      		ret
 140               		.size	I2C_UEXT, .-I2C_UEXT
 141               	.Lscope1:
 142               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 143               		.stabd	78,0,0
 144               		.section	.text.I2C_init,"ax",@progbits
 145               		.stabs	"I2C_init:F(0,49)",36,0,23,I2C_init
 146               		.stabs	"bitrate:P(5,2)",64,0,23,24
 147               		.stabs	"prescaler:P(5,2)",64,0,23,22
 148               	.global	I2C_init
 149               		.type	I2C_init, @function
 150               	I2C_init:
 151               		.stabd	46,0,0
GAS LISTING /tmp/ccGxrOnp.s 			page 4


  21:libi2c.c      **** }
  22:libi2c.c      **** 
  23:libi2c.c      **** void I2C_init(uint8_t bitrate, uint8_t prescaler)
  24:libi2c.c      ****      //S√©l√©ction de la fr√©quence 
  25:libi2c.c      **** {
 152               		.stabn	68,0,25,.LM5-.LFBB2
 153               	.LM5:
 154               	.LFBB2:
 155               	/* prologue: function */
 156               	/* frame size = 0 */
 157               	/* stack size = 0 */
 158               	.L__stack_usage = 0
  26:libi2c.c      ****   PRR0&=~1<<PRTWI;
 159               		.stabn	68,0,26,.LM6-.LFBB2
 160               	.LM6:
 161 0000 E4E6      		ldi r30,lo8(100)
 162 0002 F0E0      		ldi r31,0
 163 0004 9081      		ld r25,Z
 164 0006 1082      		st Z,__zero_reg__
  27:libi2c.c      ****   // activate internal pullups for twi.
  28:libi2c.c      ****   /* digitalWrite(SDA, 1); */
  29:libi2c.c      ****   /* digitalWrite(SCL, 1); */
  30:libi2c.c      ****   TWBR = bitrate;
 165               		.stabn	68,0,30,.LM7-.LFBB2
 166               	.LM7:
 167 0008 8093 B800 		sts 184,r24
  31:libi2c.c      ****   TWSR = prescaler & 0x03;
 168               		.stabn	68,0,31,.LM8-.LFBB2
 169               	.LM8:
 170 000c 6370      		andi r22,lo8(3)
 171 000e 6093 B900 		sts 185,r22
  32:libi2c.c      ****   TWCR = 1<<TWEN ;
 172               		.stabn	68,0,32,.LM9-.LFBB2
 173               	.LM9:
 174 0012 84E0      		ldi r24,lo8(4)
 175 0014 8093 BC00 		sts 188,r24
 176 0018 0895      		ret
 177               		.size	I2C_init, .-I2C_init
 178               	.Lscope2:
 179               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 180               		.stabd	78,0,0
 181               		.section	.text.I2C_action,"ax",@progbits
 182               		.stabs	"I2C_action:F(5,1)",36,0,36,I2C_action
 183               		.stabs	"command:P(5,1)",64,0,36,24
 184               	.global	I2C_action
 185               		.type	I2C_action, @function
 186               	I2C_action:
 187               		.stabd	46,0,0
  33:libi2c.c      **** }
  34:libi2c.c      **** 
  35:libi2c.c      **** /******************************************************************************/
  36:libi2c.c      **** int8_t I2C_action(int8_t command){
 188               		.stabn	68,0,36,.LM10-.LFBB3
 189               	.LM10:
 190               	.LFBB3:
 191               	/* prologue: function */
 192               	/* frame size = 0 */
GAS LISTING /tmp/ccGxrOnp.s 			page 5


 193               	/* stack size = 0 */
 194               	.L__stack_usage = 0
  37:libi2c.c      **** //starts any I2C operation (not stop), waits for completion and returns the status code
  38:libi2c.c      ****   TWCR = (command|(1<<TWINT)|(1<<TWEN));
 195               		.stabn	68,0,38,.LM11-.LFBB3
 196               	.LM11:
 197 0000 8468      		ori r24,lo8(-124)
 198 0002 8093 BC00 		sts 188,r24
 199               	.L7:
  39:libi2c.c      ****   while(!(TWCR & (1<<TWINT)));
 200               		.stabn	68,0,39,.LM12-.LFBB3
 201               	.LM12:
 202 0006 8091 BC00 		lds r24,188
 203 000a 87FF      		sbrs r24,7
 204 000c 00C0      		rjmp .L7
  40:libi2c.c      ****   //retour du code d'√©tat
  41:libi2c.c      ****   return (TWSR & 0xF8);
 205               		.stabn	68,0,41,.LM13-.LFBB3
 206               	.LM13:
 207 000e 8091 B900 		lds r24,185
  42:libi2c.c      **** }
 208               		.stabn	68,0,42,.LM14-.LFBB3
 209               	.LM14:
 210 0012 887F      		andi r24,lo8(-8)
 211 0014 0895      		ret
 212               		.size	I2C_action, .-I2C_action
 213               	.Lscope3:
 214               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 215               		.stabd	78,0,0
 216               		.section	.text.I2C_start,"ax",@progbits
 217               		.stabs	"I2C_start:F(5,1)",36,0,45,I2C_start
 218               	.global	I2C_start
 219               		.type	I2C_start, @function
 220               	I2C_start:
 221               		.stabd	46,0,0
  43:libi2c.c      **** 
  44:libi2c.c      **** /******************************************************************************/
  45:libi2c.c      **** int8_t I2C_start(void)
  46:libi2c.c      **** {	
 222               		.stabn	68,0,46,.LM15-.LFBB4
 223               	.LM15:
 224               	.LFBB4:
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
  47:libi2c.c      ****   return (I2C_action(1<<TWSTA));
 229               		.stabn	68,0,47,.LM16-.LFBB4
 230               	.LM16:
 231 0000 80E2      		ldi r24,lo8(32)
 232 0002 0C94 0000 		jmp I2C_action
 233               		.size	I2C_start, .-I2C_start
 234               	.Lscope4:
 235               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 236               		.stabd	78,0,0
 237               		.section	.text.I2C_stop,"ax",@progbits
 238               		.stabs	"I2C_stop:F(0,49)",36,0,52,I2C_stop
GAS LISTING /tmp/ccGxrOnp.s 			page 6


 239               	.global	I2C_stop
 240               		.type	I2C_stop, @function
 241               	I2C_stop:
 242               		.stabd	46,0,0
  48:libi2c.c      ****   //La valeur de retour est √©gale 0x08 (start) ou 0x10 (repeated start)
  49:libi2c.c      **** }
  50:libi2c.c      **** 
  51:libi2c.c      **** /******************************************************************************/
  52:libi2c.c      **** void I2C_stop(void)
  53:libi2c.c      **** // stop bit
  54:libi2c.c      **** {	
 243               		.stabn	68,0,54,.LM17-.LFBB5
 244               	.LM17:
 245               	.LFBB5:
 246               	/* prologue: function */
 247               	/* frame size = 0 */
 248               	/* stack size = 0 */
 249               	.L__stack_usage = 0
  55:libi2c.c      **** 
  56:libi2c.c      ****   TWCR = ((1<<TWINT)|(1<<TWSTO)|(1<<TWEN));
 250               		.stabn	68,0,56,.LM18-.LFBB5
 251               	.LM18:
 252 0000 84E9      		ldi r24,lo8(-108)
 253 0002 8093 BC00 		sts 188,r24
 254 0006 0895      		ret
 255               		.size	I2C_stop, .-I2C_stop
 256               	.Lscope5:
 257               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 258               		.stabd	78,0,0
 259               		.section	.text.I2C_write_data,"ax",@progbits
 260               		.stabs	"I2C_write_data:F(5,1)",36,0,62,I2C_write_data
 261               		.stabs	"data:P(5,2)",64,0,62,24
 262               	.global	I2C_write_data
 263               		.type	I2C_write_data, @function
 264               	I2C_write_data:
 265               		.stabd	46,0,0
  57:libi2c.c      ****   /* while(TWCR & 1<<TWSTO){ */
  58:libi2c.c      ****   /* } */
  59:libi2c.c      **** }
  60:libi2c.c      **** 
  61:libi2c.c      **** /******************************************************************************/
  62:libi2c.c      **** int8_t I2C_write_data(uint8_t data)
  63:libi2c.c      **** {
 266               		.stabn	68,0,63,.LM19-.LFBB6
 267               	.LM19:
 268               	.LFBB6:
 269               	/* prologue: function */
 270               	/* frame size = 0 */
 271               	/* stack size = 0 */
 272               	.L__stack_usage = 0
  64:libi2c.c      ****   TWDR=data;
 273               		.stabn	68,0,64,.LM20-.LFBB6
 274               	.LM20:
 275 0000 8093 BB00 		sts 187,r24
  65:libi2c.c      **** #ifdef DEBUG
  66:libi2c.c      ****   sprintf(debug ,"ligne  %d du fichier %s data:%x\n\r",__LINE__,__FILE__,data);
  67:libi2c.c      ****   USB_writestr(debug);
GAS LISTING /tmp/ccGxrOnp.s 			page 7


  68:libi2c.c      **** #endif
  69:libi2c.c      ****   return I2C_action(0);
 276               		.stabn	68,0,69,.LM21-.LFBB6
 277               	.LM21:
 278 0004 80E0      		ldi r24,0
 279 0006 0C94 0000 		jmp I2C_action
 280               		.size	I2C_write_data, .-I2C_write_data
 281               	.Lscope6:
 282               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 283               		.stabd	78,0,0
 284               		.section	.text.I2C_read_data,"ax",@progbits
 285               		.stabs	"I2C_read_data:F(5,1)",36,0,79,I2C_read_data
 286               		.stabs	"put_ack:P(5,1)",64,0,79,24
 287               	.global	I2C_read_data
 288               		.type	I2C_read_data, @function
 289               	I2C_read_data:
 290               		.stabd	46,0,0
  70:libi2c.c      ****   //La valeur de retour:
  71:libi2c.c      ****   //0x18 (slave ACKed address)
  72:libi2c.c      ****   //0x20 (no ACK after address)
  73:libi2c.c      ****   //0x28 (data ACKed by slave)
  74:libi2c.c      ****   //0x30 (no ACK after data transfer)
  75:libi2c.c      ****   //0x38 (lost arbitration)
  76:libi2c.c      **** }
  77:libi2c.c      **** 
  78:libi2c.c      **** /******************************************************************************/
  79:libi2c.c      **** int8_t I2C_read_data(int8_t put_ack)
  80:libi2c.c      **** {	//if an ACK is to returned to the transmitting device, set the TWEA bit
 291               		.stabn	68,0,80,.LM22-.LFBB7
 292               	.LM22:
 293               	.LFBB7:
 294               	/* prologue: function */
 295               	/* frame size = 0 */
 296               	/* stack size = 0 */
 297               	.L__stack_usage = 0
  81:libi2c.c      ****   if(put_ack)
 298               		.stabn	68,0,81,.LM23-.LFBB7
 299               	.LM23:
 300 0000 8823      		tst r24
 301 0002 01F0      		breq .L13
 302               	.LBB36:
 303               	.LBB37:
  82:libi2c.c      ****     return(I2C_action(1<<TWEA));
 304               		.stabn	68,0,82,.LM24-.LFBB7
 305               	.LM24:
 306 0004 80E4      		ldi r24,lo8(64)
 307 0006 00C0      		rjmp .L14
 308               	.L13:
 309               	.LBE37:
 310               	.LBE36:
  83:libi2c.c      ****   //si non ACK (a NACK) has to be returned, just receive the data
  84:libi2c.c      ****   else
  85:libi2c.c      ****     return(I2C_action(0));
 311               		.stabn	68,0,85,.LM25-.LFBB7
 312               	.LM25:
 313 0008 80E0      		ldi r24,0
 314               	.L14:
GAS LISTING /tmp/ccGxrOnp.s 			page 8


 315 000a 0C94 0000 		jmp I2C_action
 316               		.size	I2C_read_data, .-I2C_read_data
 317               	.Lscope7:
 318               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 319               		.stabd	78,0,0
 320               		.section	.text.I2C_write,"ax",@progbits
 321               		.stabs	"I2C_write:F(5,1)",36,0,95,I2C_write
 322               		.stabs	"address:P(0,50)=k(5,2)",64,0,95,29
 323               		.stabs	"data:P(0,51)=*(5,2)",64,0,95,14
 324               		.stabs	"n:P(5,2)",64,0,95,28
 325               	.global	I2C_write
 326               		.type	I2C_write, @function
 327               	I2C_write:
 328               		.stabd	46,0,0
  86:libi2c.c      ****   //La valeur de retour:
  87:libi2c.c      ****   //0x38 (lost arbitration)
  88:libi2c.c      ****   //0x40 (slave ACKed address)
  89:libi2c.c      ****   //0x48 (no ACK after slave address)
  90:libi2c.c      ****   //0x50 (AVR ACKed data)
  91:libi2c.c      ****   //0x58 (no ACK after data transfer)
  92:libi2c.c      **** }
  93:libi2c.c      **** 
  94:libi2c.c      **** /******************************************************************************/
  95:libi2c.c      **** int8_t I2C_write(const uint8_t address, uint8_t *data, uint8_t n)
  96:libi2c.c      **** {
 329               		.stabn	68,0,96,.LM26-.LFBB8
 330               	.LM26:
 331               	.LFBB8:
 332 0000 EF92      		push r14
 333 0002 FF92      		push r15
 334 0004 0F93      		push r16
 335 0006 1F93      		push r17
 336 0008 CF93      		push r28
 337 000a DF93      		push r29
 338               	/* prologue: function */
 339               	/* frame size = 0 */
 340               	/* stack size = 6 */
 341               	.L__stack_usage = 6
 342 000c D82F      		mov r29,r24
 343 000e 7B01      		movw r14,r22
 344 0010 C42F      		mov r28,r20
  97:libi2c.c      ****   int8_t dummy;
  98:libi2c.c      ****   int i;
  99:libi2c.c      ****   //we need this for the first if()
 100:libi2c.c      ****   dummy = I2C_start();
 345               		.stabn	68,0,100,.LM27-.LFBB8
 346               	.LM27:
 347 0012 0E94 0000 		call I2C_start
 101:libi2c.c      ****   //if the start was successful, continue, otherwise return 1
 102:libi2c.c      ****   if((dummy != 0x08) && (dummy != 0x10)){
 348               		.stabn	68,0,102,.LM28-.LFBB8
 349               	.LM28:
 350 0016 8830      		cpi r24,lo8(8)
 351 0018 01F0      		breq .L16
 352               		.stabn	68,0,102,.LM29-.LFBB8
 353               	.LM29:
 354 001a 8031      		cpi r24,lo8(16)
GAS LISTING /tmp/ccGxrOnp.s 			page 9


 355 001c 01F4      		brne .L18
 356               	.L16:
 103:libi2c.c      ****     I2C_stop();
 104:libi2c.c      ****     return dummy;
 105:libi2c.c      ****   }
 106:libi2c.c      ****   //now send the slave address
 107:libi2c.c      ****   //address format:
 108:libi2c.c      ****   if((dummy=I2C_write_data(address)) != 0x18){
 357               		.stabn	68,0,108,.LM30-.LFBB8
 358               	.LM30:
 359 001e 8D2F      		mov r24,r29
 360 0020 0E94 0000 		call I2C_write_data
 361 0024 8831      		cpi r24,lo8(24)
 362 0026 01F4      		brne .L18
 363 0028 8701      		movw r16,r14
 364               	.LBB52:
 365               	.LBB53:
 109:libi2c.c      ****     I2C_stop();
 110:libi2c.c      ****     return dummy;
 111:libi2c.c      ****   }
 112:libi2c.c      ****   for(i=0; i<n; i++){
 366               		.stabn	68,0,112,.LM31-.LFBB8
 367               	.LM31:
 368 002a D0E0      		ldi r29,0
 369               	.L19:
 370 002c C801      		movw r24,r16
 371 002e 8E19      		sub r24,r14
 372 0030 9F09      		sbc r25,r15
 373 0032 8C17      		cp r24,r28
 374 0034 9D07      		cpc r25,r29
 375 0036 04F4      		brge .L29
 113:libi2c.c      ****     //now send the byte
 114:libi2c.c      ****     if((dummy=I2C_write_data(*data++)) != 0x28){
 376               		.stabn	68,0,114,.LM32-.LFBB8
 377               	.LM32:
 378 0038 F801      		movw r30,r16
 379 003a 8191      		ld r24,Z+
 380 003c 8F01      		movw r16,r30
 381 003e 0E94 0000 		call I2C_write_data
 382 0042 8832      		cpi r24,lo8(40)
 383 0044 01F0      		breq .L19
 384 0046 00C0      		rjmp .L18
 385               	.L29:
 386               	.LBB54:
 387               	.LBB55:
  56:libi2c.c      ****   /* while(TWCR & 1<<TWSTO){ */
 388               		.stabn	68,0,56,.LM33-.LFBB8
 389               	.LM33:
 390 0048 84E9      		ldi r24,lo8(-108)
 391 004a 8093 BC00 		sts 188,r24
 392               	.LBE55:
 393               	.LBE54:
 115:libi2c.c      ****       I2C_stop();
 116:libi2c.c      ****       return dummy;
 117:libi2c.c      ****     }
 118:libi2c.c      ****   }
 119:libi2c.c      ****   //  if(restart==0)
GAS LISTING /tmp/ccGxrOnp.s 			page 10


 120:libi2c.c      ****   I2C_stop();
 121:libi2c.c      ****   //if everything was OK, return zero.
 122:libi2c.c      ****   return 0;
 394               		.stabn	68,0,122,.LM34-.LFBB8
 395               	.LM34:
 396 004e 80E0      		ldi r24,0
 397 0050 00C0      		rjmp .L17
 398               	.L18:
 399               	.LBE53:
 400               	.LBE52:
 401               	.LBB56:
 402               	.LBB57:
  56:libi2c.c      ****   /* while(TWCR & 1<<TWSTO){ */
 403               		.stabn	68,0,56,.LM35-.LFBB8
 404               	.LM35:
 405 0052 94E9      		ldi r25,lo8(-108)
 406 0054 9093 BC00 		sts 188,r25
 407               	.L17:
 408               	/* epilogue start */
 409               	.LBE57:
 410               	.LBE56:
 123:libi2c.c      **** }
 411               		.stabn	68,0,123,.LM36-.LFBB8
 412               	.LM36:
 413 0058 DF91      		pop r29
 414 005a CF91      		pop r28
 415 005c 1F91      		pop r17
 416 005e 0F91      		pop r16
 417 0060 FF90      		pop r15
 418 0062 EF90      		pop r14
 419 0064 0895      		ret
 420               		.size	I2C_write, .-I2C_write
 421               		.stabs	"dummy:r(5,1)",64,0,97,24
 422               		.stabn	192,0,0,.LBB53-.LFBB8
 423               		.stabn	224,0,0,.LBE53-.LFBB8
 424               	.Lscope8:
 425               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 426               		.stabd	78,0,0
 427               		.section	.text.I2C_read,"ax",@progbits
 428               		.stabs	"I2C_read:F(5,1)",36,0,126,I2C_read
 429               		.stabs	"address:P(0,50)",64,0,126,17
 430               		.stabs	"n:P(5,2)",64,0,126,16
 431               	.global	I2C_read
 432               		.type	I2C_read, @function
 433               	I2C_read:
 434               		.stabd	46,0,0
 124:libi2c.c      **** 
 125:libi2c.c      **** /******************************************************************************/
 126:libi2c.c      **** int8_t I2C_read(const uint8_t address,uint8_t *data, uint8_t n)
 127:libi2c.c      **** {
 435               		.stabn	68,0,127,.LM37-.LFBB9
 436               	.LM37:
 437               	.LFBB9:
 438 0000 8F92      		push r8
 439 0002 9F92      		push r9
 440 0004 AF92      		push r10
 441 0006 BF92      		push r11
GAS LISTING /tmp/ccGxrOnp.s 			page 11


 442 0008 CF92      		push r12
 443 000a DF92      		push r13
 444 000c EF92      		push r14
 445 000e FF92      		push r15
 446 0010 0F93      		push r16
 447 0012 1F93      		push r17
 448 0014 CF93      		push r28
 449 0016 DF93      		push r29
 450               	/* prologue: function */
 451               	/* frame size = 0 */
 452               	/* stack size = 12 */
 453               	.L__stack_usage = 12
 454 0018 182F      		mov r17,r24
 455 001a D62F      		mov r29,r22
 456 001c C72F      		mov r28,r23
 457 001e 042F      		mov r16,r20
 128:libi2c.c      ****   int8_t dummy;
 129:libi2c.c      ****   int ack,i;
 130:libi2c.c      ****   //we need this for the first if()
 131:libi2c.c      ****   dummy = I2C_start();
 458               		.stabn	68,0,131,.LM38-.LFBB9
 459               	.LM38:
 460 0020 0E94 0000 		call I2C_start
 132:libi2c.c      ****   //as in_write_byte, first send the address 
 133:libi2c.c      ****   if((dummy != 0x08) && (dummy != 0x10)){
 461               		.stabn	68,0,133,.LM39-.LFBB9
 462               	.LM39:
 463 0024 8830      		cpi r24,lo8(8)
 464 0026 01F0      		breq .L31
 465               		.stabn	68,0,133,.LM40-.LFBB9
 466               	.LM40:
 467 0028 8031      		cpi r24,lo8(16)
 468 002a 01F4      		brne .L33
 469               	.L31:
 134:libi2c.c      ****     I2C_stop();
 135:libi2c.c      ****     return dummy;
 136:libi2c.c      ****   }
 137:libi2c.c      ****   if((dummy=I2C_write_data(address|1)) != 0x40){
 470               		.stabn	68,0,137,.LM41-.LFBB9
 471               	.LM41:
 472 002c 812F      		mov r24,r17
 473 002e 8160      		ori r24,lo8(1)
 474 0030 0E94 0000 		call I2C_write_data
 475 0034 8034      		cpi r24,lo8(64)
 476 0036 01F4      		brne .L33
 477 0038 ED2E      		mov r14,r29
 478 003a FC2E      		mov r15,r28
 479 003c C0E0      		ldi r28,0
 480 003e D0E0      		ldi r29,0
 481 0040 8824      		clr r8
 482 0042 8394      		inc r8
 483 0044 912C      		mov r9,__zero_reg__
 484               	.LBB72:
 485               	.LBB73:
 138:libi2c.c      ****     I2C_stop();
 139:libi2c.c      ****     return dummy;
 140:libi2c.c      ****   }
GAS LISTING /tmp/ccGxrOnp.s 			page 12


 141:libi2c.c      ****   //now get the data , don't return ACK
 142:libi2c.c      ****   ack=1;
 143:libi2c.c      ****   for(i=0; i<n; i++){
 486               		.stabn	68,0,143,.LM42-.LFBB9
 487               	.LM42:
 488 0046 10E0      		ldi r17,0
 144:libi2c.c      ****     if (i==n-1) ack=0;
 489               		.stabn	68,0,144,.LM43-.LFBB9
 490               	.LM43:
 491 0048 6801      		movw r12,r16
 492 004a 81E0      		ldi r24,1
 493 004c C81A      		sub r12,r24
 494 004e D108      		sbc r13,__zero_reg__
 145:libi2c.c      ****     if((dummy=I2C_read_data(ack)) != 0x50+(1-ack)*8){
 495               		.stabn	68,0,145,.LM44-.LFBB9
 496               	.LM44:
 497 0050 3BE0      		ldi r19,lo8(11)
 498 0052 A32E      		mov r10,r19
 499 0054 B12C      		mov r11,__zero_reg__
 500               	.L34:
 143:libi2c.c      ****     if (i==n-1) ack=0;
 501               		.stabn	68,0,143,.LM45-.LFBB9
 502               	.LM45:
 503 0056 C017      		cp r28,r16
 504 0058 D107      		cpc r29,r17
 505 005a 04F4      		brge .L44
 144:libi2c.c      ****     if (i==n-1) ack=0;
 506               		.stabn	68,0,144,.LM46-.LFBB9
 507               	.LM46:
 508 005c CC16      		cp r12,r28
 509 005e DD06      		cpc r13,r29
 510 0060 01F4      		brne .L35
 511 0062 812C      		mov r8,__zero_reg__
 512 0064 912C      		mov r9,__zero_reg__
 513               	.L35:
 514               		.stabn	68,0,145,.LM47-.LFBB9
 515               	.LM47:
 516 0066 882D      		mov r24,r8
 517 0068 0E94 0000 		call I2C_read_data
 518 006c 482F      		mov r20,r24
 519 006e 082E      		mov __tmp_reg__,r24
 520 0070 000C      		lsl r0
 521 0072 550B      		sbc r21,r21
 522 0074 9501      		movw r18,r10
 523 0076 2819      		sub r18,r8
 524 0078 3909      		sbc r19,r9
 525 007a 93E0      		ldi r25,3
 526               		1:
 527 007c 220F      		lsl r18
 528 007e 331F      		rol r19
 529 0080 9A95      		dec r25
 530 0082 01F4      		brne 1b
 531 0084 4217      		cp r20,r18
 532 0086 5307      		cpc r21,r19
 533 0088 01F4      		brne .L33
 146:libi2c.c      ****       I2C_stop();
 147:libi2c.c      ****       return dummy;
GAS LISTING /tmp/ccGxrOnp.s 			page 13


 148:libi2c.c      ****     }
 149:libi2c.c      ****     *data++=TWDR; 
 534               		.stabn	68,0,149,.LM48-.LFBB9
 535               	.LM48:
 536 008a 8091 BB00 		lds r24,187
 537 008e F701      		movw r30,r14
 538 0090 8193      		st Z+,r24
 539 0092 7F01      		movw r14,r30
 143:libi2c.c      ****     if (i==n-1) ack=0;
 540               		.stabn	68,0,143,.LM49-.LFBB9
 541               	.LM49:
 542 0094 2196      		adiw r28,1
 543 0096 00C0      		rjmp .L34
 544               	.L44:
 545               	.LBB74:
 546               	.LBB75:
  56:libi2c.c      ****   /* while(TWCR & 1<<TWSTO){ */
 547               		.stabn	68,0,56,.LM50-.LFBB9
 548               	.LM50:
 549 0098 84E9      		ldi r24,lo8(-108)
 550 009a 8093 BC00 		sts 188,r24
 551               	.LBE75:
 552               	.LBE74:
 150:libi2c.c      ****   }
 151:libi2c.c      ****   I2C_stop();
 152:libi2c.c      ****   //Si tout est OK, retourne zero.
 153:libi2c.c      ****   return 0;
 553               		.stabn	68,0,153,.LM51-.LFBB9
 554               	.LM51:
 555 009e 80E0      		ldi r24,0
 556 00a0 00C0      		rjmp .L32
 557               	.L33:
 558               	.LBE73:
 559               	.LBE72:
 560               	.LBB76:
 561               	.LBB77:
  56:libi2c.c      ****   /* while(TWCR & 1<<TWSTO){ */
 562               		.stabn	68,0,56,.LM52-.LFBB9
 563               	.LM52:
 564 00a2 94E9      		ldi r25,lo8(-108)
 565 00a4 9093 BC00 		sts 188,r25
 566               	.L32:
 567               	/* epilogue start */
 568               	.LBE77:
 569               	.LBE76:
 154:libi2c.c      **** }
 570               		.stabn	68,0,154,.LM53-.LFBB9
 571               	.LM53:
 572 00a8 DF91      		pop r29
 573 00aa CF91      		pop r28
 574 00ac 1F91      		pop r17
 575 00ae 0F91      		pop r16
 576 00b0 FF90      		pop r15
 577 00b2 EF90      		pop r14
 578 00b4 DF90      		pop r13
 579 00b6 CF90      		pop r12
 580 00b8 BF90      		pop r11
GAS LISTING /tmp/ccGxrOnp.s 			page 14


 581 00ba AF90      		pop r10
 582 00bc 9F90      		pop r9
 583 00be 8F90      		pop r8
 584 00c0 0895      		ret
 585               		.size	I2C_read, .-I2C_read
 586               		.stabs	"dummy:r(5,1)",64,0,128,24
 587               		.stabs	"ack:r(0,1)",64,0,129,8
 588               		.stabs	"i:r(0,1)",64,0,129,28
 589               		.stabn	192,0,0,.LBB73-.LFBB9
 590               		.stabn	224,0,0,.LBE73-.LFBB9
 591               	.Lscope9:
 592               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 593               		.stabd	78,0,0
 594               		.section	.text.I2C_rw,"ax",@progbits
 595               		.stabs	"I2C_rw:F(5,1)",36,0,156,I2C_rw
 596               		.stabs	"adresse:P(0,50)",64,0,156,28
 597               		.stabs	"dataOut:P(0,51)",64,0,156,22
 598               		.stabs	"nOut:P(5,2)",64,0,156,20
 599               		.stabs	"dataIn:P(0,51)",64,0,156,14
 600               		.stabs	"nIn:P(5,2)",64,0,156,16
 601               	.global	I2C_rw
 602               		.type	I2C_rw, @function
 603               	I2C_rw:
 604               		.stabd	46,0,0
 155:libi2c.c      **** /******************************************************************************/
 156:libi2c.c      **** int8_t I2C_rw(const uint8_t adresse, uint8_t *dataOut, uint8_t nOut, uint8_t *dataIn, uint8_t nIn)
 157:libi2c.c      **** {
 605               		.stabn	68,0,157,.LM54-.LFBB10
 606               	.LM54:
 607               	.LFBB10:
 608 0000 EF92      		push r14
 609 0002 FF92      		push r15
 610 0004 0F93      		push r16
 611 0006 CF93      		push r28
 612               	/* prologue: function */
 613               	/* frame size = 0 */
 614               	/* stack size = 4 */
 615               	.L__stack_usage = 4
 616 0008 C82F      		mov r28,r24
 617 000a 7901      		movw r14,r18
 158:libi2c.c      ****   int err;
 159:libi2c.c      ****   // restart=1;
 160:libi2c.c      ****   if((err=I2C_write(adresse, dataOut, nOut))!=0){
 618               		.stabn	68,0,160,.LM55-.LFBB10
 619               	.LM55:
 620 000c 0E94 0000 		call I2C_write
 621 0010 8111      		cpse r24,__zero_reg__
 622 0012 00C0      		rjmp .L46
 161:libi2c.c      ****     //restart=0;
 162:libi2c.c      ****     return err;}
 163:libi2c.c      ****   if((err=I2C_read(adresse, dataIn, nIn))!=0){
 623               		.stabn	68,0,163,.LM56-.LFBB10
 624               	.LM56:
 625 0014 402F      		mov r20,r16
 626 0016 B701      		movw r22,r14
 627 0018 8C2F      		mov r24,r28
 628               	/* epilogue start */
GAS LISTING /tmp/ccGxrOnp.s 			page 15


 164:libi2c.c      ****     //restart=0;
 165:libi2c.c      ****     return err;}  
 166:libi2c.c      ****   //restart=0;
 167:libi2c.c      ****   //Si tout est OK, retourne zero.
 168:libi2c.c      ****   return 0;
 169:libi2c.c      **** }
 629               		.stabn	68,0,169,.LM57-.LFBB10
 630               	.LM57:
 631 001a CF91      		pop r28
 632 001c 0F91      		pop r16
 633 001e FF90      		pop r15
 634 0020 EF90      		pop r14
 163:libi2c.c      ****     //restart=0;
 635               		.stabn	68,0,163,.LM58-.LFBB10
 636               	.LM58:
 637 0022 0C94 0000 		jmp I2C_read
 638               	.L46:
 639               	/* epilogue start */
 640               		.stabn	68,0,169,.LM59-.LFBB10
 641               	.LM59:
 642 0026 CF91      		pop r28
 643 0028 0F91      		pop r16
 644 002a FF90      		pop r15
 645 002c EF90      		pop r14
 646 002e 0895      		ret
 647               		.size	I2C_rw, .-I2C_rw
 648               	.Lscope10:
 649               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 650               		.stabd	78,0,0
 651               		.text
 652               		.stabs	"",100,0,0,.Letext0
 653               	.Letext0:
 654               		.ident	"GCC: (GNU) 5.4.0"
GAS LISTING /tmp/ccGxrOnp.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 libi2c.c
     /tmp/ccGxrOnp.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccGxrOnp.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccGxrOnp.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccGxrOnp.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccGxrOnp.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccGxrOnp.s:113    .text.I2C_UEXT:0000000000000000 I2C_UEXT
     /tmp/ccGxrOnp.s:150    .text.I2C_init:0000000000000000 I2C_init
     /tmp/ccGxrOnp.s:186    .text.I2C_action:0000000000000000 I2C_action
     /tmp/ccGxrOnp.s:220    .text.I2C_start:0000000000000000 I2C_start
     /tmp/ccGxrOnp.s:241    .text.I2C_stop:0000000000000000 I2C_stop
     /tmp/ccGxrOnp.s:264    .text.I2C_write_data:0000000000000000 I2C_write_data
     /tmp/ccGxrOnp.s:289    .text.I2C_read_data:0000000000000000 I2C_read_data
     /tmp/ccGxrOnp.s:327    .text.I2C_write:0000000000000000 I2C_write
     /tmp/ccGxrOnp.s:433    .text.I2C_read:0000000000000000 I2C_read
     /tmp/ccGxrOnp.s:603    .text.I2C_rw:0000000000000000 I2C_rw

NO UNDEFINED SYMBOLS
